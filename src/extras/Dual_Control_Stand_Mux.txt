@name ptgamma/Dual_Control_Stand_Mux
@inputs EngineRun_F GenField_F BrakeCutIn_F CtlTable_F:table Pod_F:entity Active_F Lights_Front_F Lights_Rear_F Horn1_F Quill1_F Horn2_F Quill2_F Bell_F Aux1_F Aux2_F Aux3_F
@inputs EngineRun_R GenField_R BrakeCutIn_R CtlTable_R:table Pod_R:entity Active_R Lights_Front_R Lights_Rear_R Horn1_R Quill1_R Horn2_R Quill2_R Bell_R Aux1_R Aux2_R Aux3_R
@outputs EngineRun GenField BrakeCutIn CtlTable:table Pod:entity Active UsingRearSeat Lights_Front Lights_Rear Horn1 Quill1 Horn2 Quill2 Bell Aux1 Aux2 Aux3 MU_Master_F MU_Master_R
@persist MainLogicType AuxLogicType ActiveStand
@trigger 

if(first()|duped()){
    MainLogicType = 0 #Button logic for EngineRun and GenField. 0 for AND (EMD/ALCO), 1 for OR (FM).
    #NOTE: For EMD/ALCO style operation, you have to turn the EngineRun switch for the NON-OPERATING stand on first, THEN the OPERATING stand. So, if you want to use the "Forward" control stand, you
    #have to turn the "Rear" EngineRun switch on first, then the "Forward" switch. Yes, this is how EMD and ALCO actually did it.
    #FM works the opposite way, where you only turn on the switch for the stand you want to use... makes more sense, but apparently didn't help them sell locomotives :(
    AuxLogicType = 1 #Button logic for the generic auxilliary inputs Aux1 thru Aux3. 0 for AND, 1 for OR, 2 for Pick based on active stand.
    ActiveStand = 0
}
if(MainLogicType){
    if(EngineRun_F & !EngineRun_R){
        ActiveStand = 1
    }elseif(EngineRun_R & !EngineRun_F){
        ActiveStand = 2
    }elseif(!EngineRun_F & !EngineRun_R){
        ActiveStand = 0
    }
}else{
    if(EngineRun_R & !EngineRun_F){
        ActiveStand = 1
    }elseif(EngineRun_F & !EngineRun_R){
        ActiveStand = 2
    }elseif(!EngineRun_F & !EngineRun_R){
        ActiveStand = 0
    }
}

MU_Master_F = (ActiveStand==1)
MU_Master_R = (ActiveStand==2)

EngineRun = MainLogicType ? (EngineRun_F | EngineRun_R) : (EngineRun_F & EngineRun_R)
GenField = MainLogicType ? (GenField_F | GenField_R) : (GenField_F & GenField_R)
BrakeCutIn = (BrakeCutIn_F | BrakeCutIn_R)

switch(ActiveStand){
    case 1, #Forward
        CtlTable = CtlTable_F:clone()
        Pod = Pod_F
        Active = Active_F
        Lights_Front = Lights_Front_F
        Lights_Rear = Lights_Rear_F
        UsingRearSeat = 0
        if(AuxLogicType==2){
            Aux1 = Aux1_F
            Aux2 = Aux2_F
            Aux3 = Aux3_F
        }
        break
    case 2, #Reverse
        CtlTable = CtlTable_R:clone()
        Pod = Pod_R
        Active = Active_R
        Lights_Front = Lights_Front_R
        Lights_Rear = Lights_Rear_R
        UsingRearSeat = 1
        if(AuxLogicType==2){
            Aux1 = Aux1_R
            Aux2 = Aux2_R
            Aux3 = Aux3_R
        }
        break
    default,
        CtlTable = table()
        local CS1 = CtlTable_F["CS_Version",string]:explode(".")[3,string]:toNumber()
        local CS2 = CtlTable_R["CS_Version",string]:explode(".")[3,string]:toNumber()
        if(min(CS1,CS2)!=0){
            CtlTable["CS_Version",string] = "2.0."+min(CS1,CS2)
        }else{
            CtlTable["CS_Version",string] = "2.0.?"
        }
        
        local C1 = CtlTable_F["CTL_Version",string]:explode(".")[3,string]:toNumber()
        local C2 = CtlTable_R["CTL_Version",string]:explode(".")[3,string]:toNumber()
        if(min(CS1,CS2)!=0){
            CtlTable["CTL_Version",string] = "2.0."+min(C1,C2)
        }else{
            CtlTable["CTL_Version",string] = "2.0.?"
        }
        
        Pod = noentity()
        Active = 0
        Lights_Front = 0
        Lights_Rear = 0
        UsingRearSeat = 0
        if(AuxLogicType==2){
            Aux1 = 0
            Aux2 = 0
            Aux3 = 0
        }
        break
}
if(AuxLogicType==1){
    Aux1 = Aux1_F | Aux1_R
    Aux2 = Aux2_F | Aux2_R
    Aux3 = Aux3_F | Aux3_R
}elseif(AuxLogicType==0){
    Aux1 = Aux1_F & Aux1_R
    Aux2 = Aux2_F & Aux2_R
    Aux3 = Aux3_F & Aux3_R
}

Horn1 = Horn1_F | Horn1_R
Horn2 = Horn2_F | Horn2_R
Quill1 = Quill1_F | Quill1_R
Quill2 = Quill2_F | Quill2_R
Bell = Bell_F | Bell_R

CtlTable["MUXed",number] = 1
CtlTable["ActiveStand",number] = ActiveStand

@name ptgamma/extras/Engine_SoundDuration_Generator
@inputs 
@outputs 
@persist SoundPath:string CustomSounds:array PrintDelay
@persist SoundMultiplier Sounds:array SoundIndex SoundDurations:table SDKeys:array OutputString:array StringIndex PrintIndex
@trigger 

if(first() | duped()){
    # Generator requires GroveStreetGman's Train Sounds, same as PT2.
    # This generator should be used on a non-local server, and when the server has been freshly restarted. Blame Garry.
    
    SoundPath = "gsgtrainsounds/mlw251cv12/" # Make sure a / is at the end.
    CustomSounds = array(
    "transitions/down/idle-idle_low","transitions/down/1-idle","transitions/down/0-idle_low","transitions/up/idle-1","transitions/up/idle_low-0",
    "transitions/down/2-idle_high","transitions/down/idle_high-0","transitions/down/idle_high-1","transitions/up/0-idle_high","transitions/up/1-idle_high",
    "startup","startup_low","startup_low_dc","startup_high_dc","startup_med","startup_high","startup_high_dc","startup_high_ac",
    "startupair","startup_air","startup_cold","startup_hot","startup_auto",
    "shutdown","shutdown_low","shutdown_med","shutdown_high"
    )
    PrintDelay = 200 # In miliseconds. Increase if not all of the sounds are printing.
    
    #Config done.
    
    setName("PT2 Engine SoundDurations Generator")
    
    OutputString = array()
    SDKeys = array()
    StringIndex = 1
    SoundIndex = 1
    PrintIndex = 1
    SoundMultiplier = soundDuration("gsgtrainsounds/misc/switch_rotating.wav")/0.645
    
    local TransitionUp = array("0-1","1-2","2-3","3-4","4-5","5-6","6-7","7-8","0-1a","0-1b","1-2a","1-2b","2-3a","2-3b","3-4a","3-4b","4-5a","4-5b","5-6a","5-6b","6-7a","6-7b","7-8a","7-8b")
    local TransitionDown = array("1-0","2-1","3-2","4-3","5-4","6-5","7-6","8-7","1-0a","1-0b","2-1a","2-1b","3-2a","3-2b","4-3a","4-3b","5-4a","5-4b","6-5a","6-5b","7-6a","7-6b","8-7a","8-7b")
    
    for(N=1,TransitionUp:count()){
        TransitionUp[N,string] = "transitions/up/" + TransitionUp[N,string]
    }
    for(N=1,TransitionDown:count()){
        TransitionDown[N,string] = "transitions/down/" + TransitionDown[N,string]
    }
    
    Sounds = TransitionUp:add(TransitionDown):add(CustomSounds)
    
    SoundDurations = table()
    
    function number sdr(Soundpath:string){
        return floor(soundDuration(Soundpath)*100/SoundMultiplier)*10
    }
    
    timer("process",1000)
}

if(clk("process")){
    if(SoundIndex < Sounds:count()){
        timer("process",10)
    }else{
        timer("compilestring",1000)
    }
    
    local Path = SoundPath + Sounds[SoundIndex,string] + ".wav"
    
    local SDR = sdr(Path)
    if(SDR != 0){
        SoundDurations[Path,number] = SDR
        SDKeys:pushString(Path)
    }
    
    SoundIndex++
}

if(clk("compilestring")){
    if(StringIndex == 1){ #setup
        OutputString = array("SoundDurations = table()")
    }
    OutputString:pushString("SoundDurations[\"" + SDKeys[StringIndex,string] + "\",number] = " + SoundDurations[SDKeys[StringIndex,string],number])
    
    if(StringIndex < SoundDurations:count()){
        timer("compilestring",10)
    }else{
        print("Check console for SoundDuration table.")
        timer("printstring",100)
    }
    
    StringIndex++
}

if(clk("printstring")){
    if(PrintIndex < OutputString:count()){
        timer("printstring",PrintDelay)
    }
    print(_HUD_PRINTCONSOLE,OutputString[PrintIndex,string])
    PrintIndex++
}

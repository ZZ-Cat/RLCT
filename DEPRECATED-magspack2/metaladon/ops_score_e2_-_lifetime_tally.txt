@name OPS Score e2 - Lifetime Tally
@inputs MainEntityList:table
@persist Data:table Scores:table Overall FoundChk:table Atype Btype Exclude:string Recieved:table HID FoundPrev:table A:array CMD:table XA Deleted Spawned Trains Print:array Names:table StartTime ScanInterval
@outputs Miles Scores:table Spawned Deleted Trains Names:table Time

@inputs Inc Signal:table
@persist Rsp
@outputs Rsp
@trigger Inc

if(dupefinished()){reset()}


if(first()){
    
    #[
    ideas for things to track:
    average time between remarking
    average time between end destinations
    average handoff time?
    cars delivered per hour (per player)
    how long has a player been operating (first connected to a car to most recent car movement)
    
    ]#
    
    StartTime = systime()
    
    Scores["Total",table] = table()
    Names["Total",string] = "Total"
    
    Rsp = 0
    
    XA = 1
    
    ScanInterval = 3000
    
    runOnChat(1)
    
    function flash(E:entity,V:vector){
        
        holoCreate(HID,E:pos(),vec(1.03),E:angles(),V,E:model())
        holoMaterial(HID, "debug/debugdrawflat")
        holoAlpha(HID,100)
        timer("holodelete|"+HID,750)
        holoParent(HID,E)
        HID++
        
    }
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        return minquota() > 1000
 
    }
    
    timer("CMD",500)
    timer("checknames",200)
    CMD = table(table("command" = "scan_1"))
    
    function string get_operators(S:string){
        
        #input = entity ID in string format
        
        local FndBuffer = table()
        
        #If you've already found this car in a previous scan, copy that data and end it
 
        if(FoundChk[S,string] != ""){
            
            Btype++
            return FoundChk[S,string]
            
            
        }else{
        
            S2 = "|"
            
            local En = entity(S:toNumber()):getConnectedEntities("rope","axis")
            
            Atype++
            
            #local En = array(entity(S:toNumber()))
            
            for(X = 1,En:count()){
                
                O = En[X,entity]:owner():steamID()
                
                if(!S2:find("|"+O+"|") & !Exclude:find(En[X,entity]:id():toString())){
                    
                    S2 = S2 + O+"|"

                }
                
                FndBuffer[En[X,entity]:id():toString(),number] = 1
                
            }
            
            S3 = S2:sub(2):replace("|"," "):trim():replace(" ","|")#:explode("|")
            
            if(S3 == ""){
                
                S3 = "none"
                
            }
            
            K = FndBuffer:keys()
            
            for(X = 1,K:count()){
                
                FoundChk[K[X,string],string] = S3
                
            }  
            
            if(S3 != "none"){
                
                for(X = 1,K:count()){
                    
                    FoundPrev[K[X,string],string] = S3
                    
                }  
                
            }
            
            return S3
            
        }
        
        
        
    }
    
    
}


if(clk("CMD")){
    
    timer("CMD",100)
    
    if(CMD[1,table]["command",string] == "scan_1" & safe()){

        A = MainEntityList:keys()
        
        FoundChk = table()
        
        Exclude = "|"
    
        for(X = 1, A:count()){
            
            local Et = MainEntityList[A[X,string],table]["ents",array]
            
            for(Y = 1,Et:count()){
                
                Exclude = Exclude + Et[Y,number]:toString() + "|"
            
            }
            
        }
        
        SK = Scores:keys()
        
        for(X = 1, SK:count()){
            
            P = SK[X,string]
            
            if(findPlayerBySteamID(P):isValid()){
            
                Scores[P,table]["connected",number] = Scores[P,table]["connected",number] + (ScanInterval/1000)
                
            }
            
        }
            
        CMD = table(table("command" = "scan_main"))
        
    }
    
    if(CMD[1,table]["command",string] == "scan_main" & safe()){
 
        while(XA <= A:count() & safe()){
            
            local B = A[XA,string]
            local Pos = entity(B:toNumber()):pos()
            
            if(Pos != vec(0)){
                
                P = get_operators(B)
                
                if(!Data[B,array]:count()){
                    
                    Data[B,array] = array(0,Pos)
                    
                }
                
                local D = Pos:distance(Data[B,array][2,vector])
                
                if(P != "none"){
                
                    local P1 = P:explode("|")
                    
                    for(Y = 1,P1:count()){
                        
                        if(!Scores[P1[Y,string],table]:count()){
                            
                            Scores[P1[Y,string],table] = table()
                        }
                        
                        Scores[P1[Y,string],table]["dist",number] = Scores[P1[Y,string],table]["dist",number] + D
                        Scores["Total",table]["dist",number] = Scores["Total",table]["dist",number] + D
                        
                    }
                    
                }
                
                Miles = Miles + (D/(12*5280))
                
                Data[B,array][1,number] = Data[B,array][1,number] + D
                Data[B,array][2,vector] = Pos
                
            }
            
            XA++
            
        }
        
        if(XA > A:count()){
            
            XA = 1
            CMD:remove(1)
            timer("scan",ScanInterval)
            
        }
        
    }
    
}

if(clk("scan")){
    
    CMD = table(table("command" = "scan_1"))
    
}

if(clk("checknames")){
    
    local PL = players()
    
    for(X = 1,PL:count()){
    
        P = PL[X,entity]:name()+":"
        
        if(P != ":"){Names[PL[X,entity]:steamID(),string] = P}
        
    }
    
    timer("checknames",10000)
    
}

if(Inc < Rsp & !first()){
    
    local T = Signal
    
    if(T["name",string] == "reroute"){
        
        if(T["where",string] != "all" & T["where",string] != "all2"){
            
            local P = FoundPrev[T["ent",string],string]
            
            if(P != "none" & P != ""){
                
                local P1 = P:explode("|")
                
                for(Y = 1,P1:count()){
                    
                    if(!Scores[P1[Y,string],table]:count()){
                        
                        Scores[P1[Y,string],table] = table()
                    }
                    
                    Scores[P1[Y,string],table]["deliveries",number] = Scores[P1[Y,string],table]["deliveries",number] + 1
                    Scores["Total",table]["deliveries",number] = Scores["Total",table]["deliveries",number] + 1
                    
                    if(T["isoffmap",number]){
                        
                        Scores[P1[Y,string],table]["offmap",number] = Scores[P1[Y,string],table]["offmap",number] + 1
                        Scores["Total",table]["offmap",number] = Scores["Total",table]["offmap",number] + 1
                        
                    }
                    
                    if(T["count",number] == 1){
                        
                        Scores[P1[Y,string],table]["final",number] = Scores[P1[Y,string],table]["final",number] + 1
                        Scores["Total",table]["final",number] = Scores["Total",table]["final",number] + 1
                        
                    }
                    
                }
                
            }
              
        }
        
    }elseif(T["name",string] == "deleted"){
        
        Deleted = Deleted + 1
        
        local P = FoundPrev[T["ent",string],string]
            
        if(P != "none" & P != ""){
            
            local P1 = P:explode("|")
            
            for(Y = 1,P1:count()){
                
                if(!Scores[P1[Y,string],table]:count()){
                    
                    Scores[P1[Y,string],table] = table()
                }
                
                Scores[P1[Y,string],table]["deletions",number] = Scores[P1[Y,string],table]["deletions",number] + 1
                Scores["Total",table]["deletions",number] = Scores["Total",table]["deletions",number] + 1
                
            }
            
        }
        
    }elseif(T["name",string] == "spawn"){
        
        Spawned = Spawned + 1
        
    }elseif(T["name",string] == "train"){
        
        Trains = Trains + 1
        
    }
    
    Rsp++
    
}

if(chatClk(owner()) & lastSaid() == ".print"){
    
    hideChat(1)
    
    #[local K = Scores:keys()
    
    for(X = 1,K:count()){
        
        Print:pushString(K[X,string])
        Print:pushString(Scores[K[X,string],table]:toString())
        
    }
    
    timer("print",250)]#
    
    
    
    
    K = Scores:keys()

    TR = "Miles = "+Miles+"\n Spawned = "+Spawned+"\n Trains = "+Trains+"\n Deleted = "+Deleted+"\n Hours = "+round(Time/(60*60),2)+"\n"
    for(X = 1,K:count()){
        R = K[X,string]
        
        TR = TR + R+"\n"+Names[R,string]+"\n"+Scores[R,table]:toString()
        
    }
    
    local D = date()
    local RN = randint(100,999)
    
    print("Wrote File \"e2shared/opsdata-"+map()+"-"+D["month",number]+"-"+D["day",number]+"-"+D["year",number]+" "+RN+".txt\"")
    
    fileWrite(">e2shared/opsdata-"+map()+"-"+D["month",number]+"-"+D["day",number]+"-"+D["year",number]+" "+RN+".txt",TR)
    
}

if(chatClk(owner()) & lastSaid() == ".print"){
    
    hideChat(1)
    
    #[local K = Scores:keys()
    
    for(X = 1,K:count()){
        
        Print:pushString(K[X,string])
        Print:pushString(Scores[K[X,string],table]:toString())
        
    }
    
    timer("print",250)]#
    
    
    
    
    K = Scores:keys()

    TR = "Miles = "+Miles+"\n Spawned = "+Spawned+"\n Trains = "+Trains+"\n Deleted = "+Deleted+"\n Hours = "+round(Time/(60*60),2)+"\n"
    for(X = 1,K:count()){
        R = K[X,string]
        
        TR = TR + R+"\n"+Names[R,string]+"\n"+Scores[R,table]:toString()
        
    }
    
    local D = date()
    local RN = randint(100,999)
    
    print("Wrote File \"e2shared/opsdata-"+map()+"-"+D["month",number]+"-"+D["day",number]+"-"+D["year",number]+" "+RN+".txt\"")
    
    fileWrite(">e2shared/opsdata-"+map()+"-"+D["month",number]+"-"+D["day",number]+"-"+D["year",number]+" "+RN+".txt",TR)
    
}

if(chatClk(owner()) & lastSaid() == ".ohboyherewego"){
    
    Rsp = 0
    
}

if(clk("print")){
    
    if(playerCanPrint()){
    
        print(Print[1,string])
        Print:remove(1)
        
    }
    
    if(Print:count()){
        
        timer("print",250)
        
    }
    
    
}

Time = systime() - StartTime

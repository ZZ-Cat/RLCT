@name Operations v1.35
@persist HID MainEntityList:table Era:string Tracks:table Stock:array Router:table ToSendOut:table LocsToMark:array WorldMarks:table Interchanges:array Adder:table CMD:table Table:table TT Default:table Xt Ktr:array R2:table XALL WorldMarkEnts:array SortedTimers:array Job:table RouteKey:table Routes:table
@outputs Current_Carcount CMD:table XALL JobsActive:table SortedTimers:array

@inputs Rsp Reload:table IncRel
@persist Inc Signal:table SigOut:table
@outputs Inc Signal:table SigOut:table
@outputs MainEntityList:table
@trigger none

@model models/props_lab/servers.mdl

if(first() | dupefinished()){
    
    
    ####SETTINGS#############################################################

    Era = "1970s" #Set the Era string here. Use the same names as the Carspawner would.
    
    #Configuration file for the map
    
    ##include "opsconfig/ssg_phx_jobs"
    #include "opsconfig/lober_jobs"
    
    ####END_SETTINGS#########################################################
    
    
    #JOB CLEANUP CODE - can't be moved else E2 will whine
    local KJ = Job:keys()
    
    for(X = 1,KJ:count()){
        
        J = KJ[X,string]
        
        if(Job[J,table]["color",vector] != vec(0)){
            
            Job[J,table]["color",vector] = clamp(Job[J,table]["color",vector],vec(0),vec(255))
            
        }
        
    }
       
    local KJ = Tracks:keys()
    
    for(X = 1,KJ:count()){
        
        J = KJ[X,string]
        
        if(Tracks[J,table]["color",vector] != vec(0)){
            
            Tracks[J,table]["color",vector] = clamp(Tracks[J,table]["color",vector],vec(0),vec(255))
            
        }
        
        if(Tracks[J,table]["work",array]:count() & !Tracks[J,table]["time",number]){
            
            Tracks[J,table]["time",number] = IndTurn
            
        }
    
    }
    
    #variable delarations to get the server to shut up
    Router = table()
    SigOut = table()
    ToSendOut = table()
    Stock = array()
    HID = 0
    
    ### Functions
    
    function vector newabs(V:vector){
        
        return vec(abs(V:x()),abs(V:y()),abs(V:z()))
        
    }
    
    function string swap(S:string){
        
        if(S:find("empty")){
            
            return S:replace("empty","loaded")
            
        }else{
            
            return S:replace("loaded","empty")
            
        }
        
    }

    function number within(V:vector,S:string){
        
        #S is the location code for the current target location
        
        local CX = Tracks[S,table]["boxhi",vector]
        local CN = Tracks[S,table]["boxlo",vector]
        
        local R = Tracks[S,table]["boxrot",number]
        
        
        local V2 = V:rotateAroundAxis(vec(0,0,1),R)
        
        local Er = 0
        
        Er = ((CX:x() >= V2:x()) + (CX:y() >= V2:y()) + (CX:z() >= V2:z()) + (CN:x() <= V2:x()) + (CN:y() <= V2:y()) + (CN:z() <= V2:z()) == 6)
        
        return Er
        
    }
    
    function number distrand(N,D){
        
        return 1
        
        return floor(N-random(0,N^D)^(1/D))+1
        
    }
    
    function startEntityIDTimer(S:string){
    
        #Relative to the System Time, in seconds
        local TimerEnd = systime() + max(Tracks[MainEntityList[S,table]["route",array][1,string]:explode("|")[2,string],table]["time",number],0.01)*60 #original time is in minutes
        
        MainEntityList[S,table]["timer end",number] = TimerEnd
        
        local Index = 1
        
        while(SortedTimers[Index*2,number] < TimerEnd & SortedTimers[Index*2,number]){
            
            Index++
            
        }
        
        SortedTimers:insertString(Index*2-1,S)
        SortedTimers:insertNumber(Index*2,TimerEnd)
        
        
    }
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        return minquota() > 1000
 
    }
    
    RouteKey = table()
    Routes = table()
    
    
    function array route(Start:string,End:string){
        
        if(RouteKey[Start+" "+End,array]:count()){
            
            return RouteKey[Start+" "+End,array]
            
        }
        
        if(Tracks[Start,table]["area",string] != ""){
            
            ST_PRNT = Tracks[Start,table]["area",string]
            
        }else{
            
            ST_PRNT = Start
            
        }
        
        if(Tracks[End,table]["area",string] != ""){
            
            ND_PRNT = Tracks[End,table]["area",string]
            
        }else{
            
            ND_PRNT = End
            
        }
        
        if(ST_PRNT == ND_PRNT){
            
            return array("loc|"+End+"|local")
            
        }
        
        local Seen = table()
            
        Heap = array(ST_PRNT)
        
        local Xplor = "0|"+ST_PRNT+"|0"
        
        while(Heap:count()){
            
            local A = Xplor:explode("?")
            
            local B = A[A:count(),string]
            
            local C = B:explode("|")[2,string]
                
            Add = Routes[C,array]
            for(X = 1,Add:count()){
                
                local New = Add[X,string]
                
                local Next = Xplor+"?"+New
                
                if(New:explode("|")[2,string] == ND_PRNT | New:explode("|")[2,string] == End){
                    
                    N = Next:explode("?")
                    N:remove(1)
                    RouteKey[ST_PRNT+" "+ND_PRNT,array] = N
                    
                    if(New:explode("|")[2,string] != End){
                        local Final = N[N:count(),string]:explode("|")
            
                        Final[3,string] = "final"
                        Final[2,string] = End
                        N:pushString(Final[1,string]+"|"+Final[2,string]+"|"+Final[3,string])
                    }
                    
                    return N
                    
                }
                
                if(!Seen[New,number]){

                    if(Tracks[New:explode("|")[2,string],table]["offmap",number] == 0){
                    
                        Heap:pushString(Next)
                        
                    }
                    
                    Seen[New,number] = 1
                    
                }
                
            }
                
            Heap:remove(1)
            Xplor = Heap[1,string]
            
        }
        
        RouteKey[Start+" "+End,array] = array("0|"+End+"|0")
        
        return array("0|"+End+"|0")
        
    }    
    
    function printM(Print:string){ #Fancy print
        
        local P = Print:explode("||")
        
        P[1,string] = "OPS: "+P[1,string]
        
        for(X = 1,P:count()){
            #vec(60,70,150)*1.8
            printColor(vec(30,100,200),P[X,string])
            
        }
        
    }
    
    #roll for a random number using my roller arrays
    function string rollW(D:array,Not:string){
        
        #BUG: Crashes if it can't find a suitable 2nd destination for routing!
        
        #local GlobUse = minquota()
        
        #example: Dat = (3, 1, data1, 3, data2)
        #roll 2
        #is 3 higher or equal to 2? No.
        #is 3 higher or equal to 3? Yes. 
        
        local Dat = D:clone()
        
        local Bad = Tracks[Not,table]["name",string]
        local Fine = (Not == "")
        
        while(Dat:count()){
        
            local Needle = random(0,Dat[1,number])
            
            for(Y = 1,(Dat:count()-1)/2){
            
                if(Dat[(Y*2),number] >= Needle){
                    
                    if(Fine || (Tracks[Dat[(Y*2)+1,string],table]["name",string] != Bad)){
                        
                        return Dat[(Y*2)+1,string]
                        
                    }else{
                        
                        Dat:remove(Y*2+1)
                        Dat:remove(Y*2)
                        
                    }
                    
                }
                
                
            }
            
        }
        
        return ""
        
    }
    
    #text for world markers
    function entity textworld(Str:string,Pos:vector,Ang){  
        
        Display = Tracks[Str,table]["name",string]
        Vec = Tracks[Str,table]["color",vector]
        
        local Bloc = Display:upper():explode("|")
        
        local Mesh = p2mCreate(1,Pos,ang(0,Ang,0),16,vec(1))
        #I would totally use MeshScale, but for some reason it's broken on some servers? wat
        
        Mesh:p2mSetMaterial("debug/debugdrawflat")
        Mesh:p2mSetColor(Vec*1.1)
        
        #local Hypotenuse = ((Bloc:count()-1)*14)+10
        local Centr = vec(0)

        for(Y = 1, Bloc:count()){ #For each layer of the text
            
            local Text = Bloc[Y,string]:explode("")
            local Back = -Text:count()*6-24

            #For each text model, set the bodygroup and create 2 copies: one on each side if the text is not flat.
            
            for(X = 1,ceil(Text:count()/4)){    
                
                Bod = 0
                
                for(Z = 1, 4){
                    
                    local Byte = toByte(Text[(X*4)+Z-4,string])-65
                    
                    if(Byte < 0 | Byte >= 26){Byte = 26}
                    
                    Bod = Bod + Byte*(27^(Z-1))
                    
                }
                
                Mesh:p2mPushModel(1,"models/magtrains/reportingmark.mdl",array(1),
                Centr+4*vec(((Y-1)*14)+10,Back+(X*48),0):rotateAroundAxis(vec(0,1,0),90),# + Position,
                ang(0,0,0):rotateAroundAxis(vec(0,1,0),90),
                vec(4),0,0,Bod)
                
            }
            
        }
        
        Mesh:p2mBuild()
        
        return Mesh
        
    }
    
    function send(T:table){
        
        SigOut:pushTable(T)
        timer("send",1000)
        
    }
    
    function array verify(T:array){
        
        if(!T:count()){
            
            return array()
            
        }
        
        return T
        
    }
    
    function markcar(E:entity,Route:array){

        Tb = Job[Route[1,string]:explode("|")[1,string],table]
        
        
        local Dat = Tracks[Route[1,string]:explode("|")[2,string],table]
        local Dat2 = Tracks[Route[Route:count(),string]:explode("|")[2,string],table]
        
        local FD = "" #"\n Pre-sort with: "+Job[Route[2,string]:explode("|")[1,string],table]["job",string] #Despite being good information, this line so confused operators that may delays and misnomers occured so I elected to remove it
        
        if(Job[Route[2,string]:explode("|")[1,string],table]["job",string] == Tb["job",string]){
            
            FD = "\n Final Destination: "+Dat2["name",string]:replace("|\n","\n"):replace("|"," ")

        }
        
        local Vec = Tb["color",vector]
        
        if(Dat2["name",string] == Dat["name",string]){
            
            FD = ""
            
            local Comp = Route[1,string]:explode("|")[3,string]
            
            if(Comp == "final" | Comp == "local"){
                Vec = Dat["color",vector]
            }
            
        }
        
        if(Tb["desc",string] != ""){
            
            DSC = "\n"+Tb["desc",string]
            
        }

        E:setCarTag("Next Destination: "+Dat["name",string]:replace("|\n","\n"):replace("|"," ") + "\n Via: "+Tb["job",string]+" "+Tb["name",string]+DSC+FD)
        E:setCarTagColor(Vec)
        
    }
    
    function number checksum(S1:string,S2:string,J:string){
        
        #uses an internal table to determine if 2 locations have already been linked by that job to prevent duplicates
        
        
    }
    
    #Reclassifies cars according to standard rules.
    function reclassifyCar(CarIDString:string){
        
        local CarData = MainEntityList[CarIDString,table]
        
        local Type = CarData["type",string]
        local Route = CarData["route",array]
    
        if(Route:count() > 1){ #If there's still places left to travel
            
            Route:remove(1)
            printM("\""+Type+"\" routed at "+Route[1,string])
            markcar(entity(CarIDString:toNumber()),Route)
            
        }else{
            
            if(Tracks[Route[1,string]:explode("|")[2,string],table]["offmap",number] > 0){
                
                for(Y = 1,CarData["ents",array]:count()){
                    
                    entity(CarData["ents",array][Y,number]):propDelete()
                    
                }
                
                MainEntityList:remove(CarIDString)
                
            }else{
                
                local Loc = Route[1,string]:explode("|")[2,string]
                
                GoTo = rollW(Router[Type,array],Loc)
                            
                Route = route(Loc,GoTo)

                MainEntityList[CarIDString,table] = table("type" = Type,"route" = Route,"ents" = CarData["ents",array])
                
                markcar(entity(CarIDString:toNumber()),Route)
                
            }
            
        }
        
    }
    
    ### Precalculated stuff
    
    #allows it to communicate with the carspawner with datasignals
    dsJoinGroup("operations")
    
    #starting the repeating timer for checking if cars are within triggers
    timer("scan cars",3000)
        
    CMD = table()
    CMD:pushTable(table("command" = "first","stage" = "routebase"))
    
    timer("CMD",1000)
    
    #timer for starting timer check system
    timer("check timers",1000)
    
    
    #how the command to send back the data for car labeling works (carspawner side)
    #markthis = table(array(Frame:id(),Bogie1:id(),Bogie2:id()),Instr[1,table][7,string])
    
    #[carspawner code demonstrating how the train command turns into spawn instructions
    if(Data[1,string] == "summon"){
        
        CommandStack:pushString(Time+" summon via populate")
        Instr:pushTable(table("goto",Data[2,vector],Data[3,number],1))
        
     }else{
    
        Instr:pushTable(table("clean"))
        Instr:pushTable(table("sp",Data[1,string],Data[2,vector],Data[3,string]))
        
        CommandStack:pushString(Time+" clean via pop")
        CommandStack:pushString(Time+" pop sp "+Data[1,string])   
        
    }]#
    
    
    
    #[
    
    pseudocode  
    
    for selecting random cars in the wild:
    select a location to go to and car type (boxcar, coal, etc)
    click on car: override path with direct route to location, override type to type
    
    spawning procedure:
    
    player input or trigger by lack of cars in circulation
    
    give location and train type
    
    e2 determines roll of car types
    make stack of picked car types (repeat rolling several times)
    for each car, determine a next location, then create route 
    
    if location is singular:
    sort cars into blocks
    else:
    roll for every "industry" track (preset)
    
    compile all orders into 1 massive instruction, including teleports
    send order to carspawner and wait for carspawner to return "donezo" signal before considering new spawns (queue player orders?)
    
    as each car is created:
        compare current car location to destination
        create a route
        mark car
        save car data
        
    each tick:
        scan all cars for being inside bounding boxes
        if yes, advance marker to next location
        if no more locations:
            if car is at an outbound location, delete it
            else find a new target and generate a route
            
            
    industry data structure:
    parent, name, color, bouding box a, bounding box b, turnaround time, spawner pos, spawner ang, array of car type / weight pairs
    
    
    how to determine a next location:
    
    for every industry in the map, add it to the roller if it has capacity for the selected car type
    return the result of a weighted roll for location based on above
    
    
    
    note: create reverse lookup for locations IE given parent return children
    maybe this can be used to auto-fill train types and traffic patterns? mmm
    
    
    idea: to fix industry routing problem: industries are just spawning tracks, create normal locations AND separate routing table (unrelated to locations) for determining destinations, then just have it reference back to the "combined zone" for each industry
    ie: 2 spawning location tracks separate, 1 route-to location entity and combined trigger volume (like any other location), and auto-generated routing data based on industry input
    
    ]#
    

    
    #[mechanism for testing if it correctly makes routes between locations
    for(X = 1,10){
        
        R1 = K[randint(1,K:count()),string]
        R2 = K[randint(1,K:count()),string]
    
        print(route(R1,R2))
        
    }]#
    
    K = Job:keys()
    
    for(X = 1,K:count()){
        
        local J = K[X,string]
        local Points = Job[J,table]["routing",table]
        
        #[
        #Within system - means trains can pick up and move cars to other industries within the pool for some other train to pick up
        for(Y = 1,Points:count()){
            
            local D2 = Points[Y,array]
            
            for(Z = 1,D2:count()){
                
                for(XX = Z+1,D2:count()){
                
                    local L1 = D2[Z,string]
                    local L2 = D2[XX,string]
                    
                    Routes[L1,array] = verify(Routes[L1,array])
                    Routes[L1,array]:pushString(J+"|"+L2+"|within")
                    
                    Routes[L2,array] = verify(Routes[L2,array])
                    Routes[L2,array]:pushString(J+"|"+L1+"|within")
                    
                }
                
            }
            
        }]#
        
        for(Y = 1,Points:count()-1){
            
            for(XY = 1,Points[Y,array]:count()){
            
                local Loc = Points[Y,array][XY,string]
                
                if(Routes[Loc,array]:count() == 0){
                    Routes[Loc,array] = array()
                }
                
                for(Z = Y,Points:count()-1){
                    
                    local P2 = Points[Z+1,array]
                    
                    for(XX = 1,P2:count()){
                    
                        if(Loc != P2[XX,string]){# & !checksum(Loc,P2[XX,string])){
                            
                             Routes[Loc,array]:pushString(J+"|"+P2[XX,string]+"|road")
                            
                        }
                        
                    }
            
                }
                
            }
            
        }
        
    }
    
    LocsToMark = WorldMarks:keys()
    
    runOnChat(1)

}

if(dupefinished()){reset()}

if(dsClk("markthis")){ ##MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER##
    
    local T = dsGetTable()
    
    local GoTo = T[2,string]:explode("|")[1,string]
    local Loc = T[2,string]:explode("|")[2,string]
    local Type = T[2,string]:explode("|")[3,string]
    
    local Route = route(Loc,GoTo)
    
    local EE = T[1,array][1,number]
    
    MainEntityList[EE:toString(),table] = table("type" = Type,"route" = Route,"ents" = T[1,array])

    markcar(entity(EE),Route)

    send(table("name" = "spawn","ent" = EE:toString()))

}

if(chatClk(owner())){ #Text parser
    
    local LSC = owner():lastSaid():lower():trim() 
    local LSCE = LSC:explode(" ")
    
    if(LSCE[1,string] == ".data"){
        
        printTable(MainEntityList[owner():aimEntity():id():toString(),table])         
        
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".train"){
        
        Table = table()
        TT = 1
        
        local Count = LSCE[2,string]:toNumber()
        local Loc = LSCE[3,string]
        
        if(Loc == "all"){ #spawn trains at industries
            
            XALL = 1
            R2 = table()
            
            CMD:pushTable(table("command" = "allind","count" = Count,"stage" = "one"))
            
        }else{ #spawn trains normally
                
            local Tl = Tracks[Loc,table]
            
            if(Tl["spawnpos",vector] != vec(0)){
                
                Adder = table()
            
                Table[(TT):toString(),array] = array("summon",Tl["spawnpos",vector]+vec(0,0,10),Tl["spawnang",number])
                TT++
                
                CMD:pushTable(table("command" = "train-std-1","count" = Count,"loc" = Loc,"within" = ""))
                
            }else{
            
                printM("invalid track "+Loc)
                
            }
            
        }
        
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".bonk"){
        
        local Eo = owner():aimEntity()
        
        hideChat(1)
        
        if(Eo:isValid()){
            
            printM("Kicked the car to the next stage")
            
            startEntityIDTimer(Eo:id():toString())
            
        }
        
    }elseif(LSCE[1,string] == ".reworldmark"){
        
        hideChat(1)
        printM("Removed "+WorldMarkEnts:count()+" markers and remade them.")
        
        while(WorldMarkEnts:count()){
            
            WorldMarkEnts[1,entity]:propDelete()
            WorldMarkEnts:remove(1)
            
        }
        
        LocsToMark = WorldMarks:keys()
        
    }elseif(LSCE[1,string] == ".clarify"){
        
        local Eo = owner():aimEntity()
        local T2 = MainEntityList[Eo:id():toString(),table]
        
        hideChat(1)
        
        if(Eo:isValid() & T2:count()){
            
            printM("Reapplied "+Eo:id()+"'s car marker.")
            markcar(Eo,T2["route",array])
            
        }
        
    }elseif(LSCE[1,string] == ".era"){
        
        Era = LSCE[2,string]
        printM("Set era to "+Era)
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".ohboyherewego" & owner():aimEntity() == entity()){
        
        print("We're really doing this!")
        
        hideChat(1)
        
        MainEntityList = Reload:clone()
        local Keys = MainEntityList:keys()
        Inc = IncRel
        SortedTimers = array()
        
        for(X = 1,Keys:count()){
            
            if(MainEntityList[Keys[X,string],table]["timer end",number] != 0){
                
                startEntityIDTimer(Keys[X,string])
                
            }
            
        }

    }
}


if(clk("scan cars")){ 
    
    timer("scan cars",2000)
    JobsActive = table()
    
    local K = MainEntityList:keys()
    
    for(X = 1,K:count()){
        
        local T = MainEntityList[K[X,string],table]
        
        local Route = T["route",array]
        
        local Job = Route[1,string]:explode("|")[1,string]
        
        if(T["timer end",number] == 0){JobsActive[Job,number] = JobsActive[Job,number] + 1}
        
        if(within(entity(T["ents",array][1,number]):pos(),Route[1,string]:explode("|")[2,string]) & T["timer end",number] == 0){
            
            local IsGoingOffMap = Tracks[Route[1,string]:explode("|")[2,string],table]["offmap",number] > 0
            startEntityIDTimer(K[X,string])
            send(table("name" = "reroute","ent" = K[X,string],"where" = Route[1,string]:explode("|")[2,string],"count" = Route:count(),"isoffmap" = IsGoingOffMap))
            if(IsGoingOffMap){MainEntityList[K[X,string],table]["out",number] = 1}
            entity(K[X,string]:toNumber()):setCarTagColor(vec(220))
            
        }elseif(entity(T["ents",array][1,number]):pos() == vec(0)){

            for(Y = 1,T["ents",array]:count()){
                    
                entity(T["ents",array][Y,number]):propDelete()
                
            }
            
            if(T["out",number] == 0){
            
                send(table("name" = "deleted","ent" = T["ents",array][1,number]:toString()))
                
            }
            
            MainEntityList:remove(K[X,string])
            
        }
        
    }
    
    while(LocsToMark:count() & minquota() > 3000){
        
        local A = WorldMarks[LocsToMark[1,number],array]
        WorldMarkEnts:pushEntity(textworld(A[1,string],A[2,vector],A[3,number]))
        LocsToMark:remove(1)
        
    }
    
}elseif(clk("check timers")){
    
    timer("check timers",1000)
    
    while(SortedTimers[2,number] != 0 & SortedTimers[2,number] < systime()){
    
        local CarIDString = SortedTimers[1,string] #Timer Name
        
        if(MainEntityList[CarIDString,table]:count() > 0){ #if car data is Valid:
        
            reclassifyCar(CarIDString)
            
        }
        
        SortedTimers:remove(1)
        SortedTimers:remove(1)
        
        MainEntityList[CarIDString,table]["timer end",number] = 0
        
    }
    
}

Current_Carcount = MainEntityList:keys():count()
    

if(ToSendOut != table() & minquota() > 3000){
    
    dsSend("populate","operations",ToSendOut)
    ToSendOut = table()
    
}

if(clk("CMD")){
    
    timer("CMD",250)

    if(CMD[1,table]["command",string] == "train-std-1" & safe()){
        
        while(CMD[1,table]["count",number] & safe()){
                     
            local Type = rollW(Stock,"")
            local GoTo = rollW(Router[Type,array],CMD[1,table]["loc",string])
            
            local Mask = Tracks[CMD[1,table]["loc",string],table]["excl",string]
            
            while((Mask == Tracks[GoTo,table]["excl",string] & Mask != "") | (CMD[1,table]["loc",string] == GoTo)){
                    
                Type = rollW(Stock,"")
                GoTo = rollW(Router[Type,array],CMD[1,table]["loc",string])
                    
            }
                  
                
            #mechanism that generates an "Index" for each track, allowing sorting  
            local Index = ""
            local Search = GoTo
            
            while(Search != ""){
                
                Index = Search + Index
                
                Search = Tracks[Search,table]["area",string]
                
            }
            
            
            
            for(Y = 1,Adder:count()+1){
                
                if(Index > Adder[Y,array][4,string]){
            
                    Adder:insertArray(Y,array(".sp 0 "+Era+" "+Type,vec(distrand(3,3),0,0),GoTo+"|"+CMD[1,table]["loc",string]+"|"+Type,Index))
                    break
                    
                }
                 
            }
            
            CMD[1,table]["count",number] = CMD[1,table]["count",number] - 1
            
        }
        
        if(!CMD[1,table]["count",number]){
            
            for(X = 1,Adder:count()){
                
                Adder[X,array]:remove(4)
                
                Table[(TT):toString(),array] = Adder[X,array]
                TT++
                
            }
            
            Table[(TT):toString(),array] = array("summon",vec(0),0)
            
            send(table("name" = "train","loc" = CMD[1,table]["loc",string]))
            
            ToSendOut = Table
        
            printM("spawned train length "+Adder:count()+" at "+CMD[1,table]["loc",string])
            
            CMD:remove(1)
            
        }
        
    }elseif(CMD[1,table]["command",string] == "first" & safe()){
            
        #pull out types from Tracks and use them to lay the foundation for the router
        
        if(CMD[1,table]["stage",string] == "routebase" & safe()){
        
            local K = Tracks:keys()
            
            for(X = 1, K:count()){
                
                local Dat = Tracks[K[X,string],table]["work",array]
                
                for(Y = 1,Dat:count()){
                    
                    local Dat2 = Dat[Y,string]
                    
                    if(Dat2 != ""){
        
                        Router[Dat2,array] = array(0)
                        Router[swap(Dat2),array] = array(0)
                        
                    }
                    
                }
                
                if(Tracks[K[X,string],table]["offmap",number] > 0){
                    
                    Interchanges = Interchanges:add(array(K[X,string],Tracks[K[X,string],table]["offmap",number]))
                    
                }
                
            }
            
            Ktr = Tracks:keys()
            
            #vars for test train spawn (see below)
            Table = table()
            TT = 1
            
            #essential variable
            Default = table()
            
            CMD[1,table]["stage",string] = "tracks"
            Xt = 1
            
        }
        
        if(CMD[1,table]["stage",string] == "tracks" & safe()){
            
            while(Xt <= Ktr:count() & holoCanCreate() & safe()){
                
                Index = Ktr[Xt,string]
                local Tl = Tracks[Index,table]
                
                local P = Tl["boxhi",vector]
                local N = Tl["boxlo",vector]
                local R = Tl["boxrot",number]
                
                local C = ((P+N)*0.5)
            
                local C2 = C:rotateAroundAxis(vec(0,0,1),R)
                
                Tl["boxhi",vector] = C2+(P-C)
                Tl["boxlo",vector] = C2-(P-C)
                
                local Sc = newabs((1/(48*8))*(Tl["boxlo",vector]-Tl["boxhi",vector]))
                
                #[marks the trigger zones with boxes
                holoCreate(HID,C-(vec(0,0,48*4)*Sc:z()),Sc,ang(0,0,0):rotateAroundAxis(vec(0,0,1),-R),Tl["color",vector],"models/hunter/blocks/cube8x8x8.mdl")
                holoAlpha(HID,70)
                holoMaterial(HID,"debug/debugdrawflat")
                HID++
                #]#
                
                local Rte = Tl["work",array]
                
                for(Y = 1,Rte:count()/2){
                    
                    local Q = Rte[Y*2-1,number]
                    local D = Rte[Y*2,string]
                    
                    Router[D,array]:pushNumber(Router[D,array][1,number] + Q)
                    Router[D,array]:pushString(Index)
                    Router[D,array][1,number] =  Router[D,array][1,number] + Q
                    
                    Default[D,number] =  Default[D,number] + Q
                    
                }
                
                #this code is just for the bit below this, not super nessecary
                
                Type = Rte[2,string]
                Count = Rte[1,number]
                
                if(Type != ""){
                
                    Table[(TT*2-1):toString(),array] = array("summon",Tl["spawnpos",vector]+vec(0,0,20),Tl["spawnang",number])
                    Table[(TT*2):toString(),array] = array(".sp 0 "+Era+" "+swap(Type),vec(Count,0,0),Index)
                    TT++
                    
                }
                
                Xt++
                
                
            }
            
            if(Xt > Ktr:count()){
                
                CMD[1,table]["stage",string] = "finish" 
                
                #dsSend("populate","operations",Table) #this line sends a command to spawn 1 car of the correct type at every location to verify it works
                
            }
            
            
            
        }
        
        if(CMD[1,table]["stage",string] == "finish" & safe()){
        
            local KD = Default:keys()
            Stock = array(0)
            
            for(X = 1,KD:count()){
                
                local K = KD[X,string]
                
                Stock:pushNumber(Stock[1,number] + Default[K,number])
                Stock[1,number] = Stock[1,number] + Default[K,number]
                Stock:pushString(K)
                
            }
            
            
            
            local KA = Router:keys()
                
            for(X = 1,KA:count()){
                
                local Entry = KA[X,string]
                local Base = 1
                
                if(Router[Entry,array][1,number] != 0){
                    
                    Base =  Router[Entry,array][1,number]
                    
                }
                
                for(Y = 1,Interchanges:count()/2){
                    
                    local Add = Interchanges[Y*2,number] * Base
                    
                    Router[Entry,array][1,number] = Router[Entry,array][1,number] + Add
                    Router[Entry,array]:pushNumber(Router[Entry,array][1,number])
                    Router[Entry,array]:pushString(Interchanges[Y*2-1,string])
                    
                }
                
                
            }
            
            CMD:remove(1)
            
        }
        
    }elseif(CMD[1,table]["command",string] == "allind" & safe()){
        
        if(CMD[1,table]["stage",string] == "one" & safe()){
        
            while(XALL <= CMD[1,table]["count",number] & safe()){
                
                local Type = rollW(Stock,"")
                local Loc2 = rollW(Router[Type,array],"")
                
                while(Tracks[Loc2,table]["offmap",number] > 0){
                    
                    Type = rollW(Stock,"")
                    Loc2 = rollW(Router[Type,array],"")
                    
                }
                
                local Type = swap(Type)
                local GoTo = rollW(Router[Type,array],Loc2)
                
                if(R2[Loc2,table]:count() == 0){
                    
                    R2[Loc2,table] = table()
                    
                }   
                
                R2[Loc2,table]:pushArray(array(".sp 0 "+Era+" "+Type,vec(distrand(3,3),0,0),GoTo+"|"+Loc2+"|"+Type))
                
                XALL++
    
            }
            
            if(XALL > CMD[1,table]["count",number]){
                
                Ktr = R2:keys()
                CMD[1,table]["stage",string] = "two"
                XALL = 1
                
            }
            
        }
        
        if(CMD[1,table]["stage",string] == "two" & safe()){
        
            while(XALL <= Ktr:count() & safe()){
                
                local Tl = Tracks[Ktr[XALL,string],table]
                
                Table[(TT):toString(),array] = array("summon",Tl["spawnpos",vector]+vec(0,0,20),Tl["spawnang",number])
                TT++
                
                local Add = R2[Ktr[XALL,string],table]
                
                for(Y = 1,Add:count()){
                    
                    Table[(TT):toString(),array] = Add[Y,array]
                    TT++
                    
                }
                
                XALL++
                
            }
            
            if(XALL > Ktr:count()){
                
                Table[(TT):toString(),array] = array("summon",vec(0),0)
                
                ToSendOut = Table
                
                printM("spawned "+CMD[1,table]["count",number]+" cars at \"all industries\"")
                
                CMD:remove(1)
                
            }
            
        }
        
    }
    
}

if(clk("send")){
    
    if(SigOut:count() & Rsp == Inc){
        
        Signal = SigOut[1,table]:clone()
        SigOut:remove(1)
        Inc++
        
    }
    
    if(SigOut:count() | Rsp == Inc){
    
        timer("send",50)
        
    }
    
}





    
    

@name Operations - Sunset Gulch v1.1
@persist Ents:table HID RandColors:array TextScale TextAngle Era:string Tracks:table Stock:array Router:table Timers:table ToSendOut:table LocsToMark:array WorldMarks:table Holos RespawnTags:array Interchanges:array InterCheck:string
@outputs Current_Carcount HID RespawnTags:array

if(first() | dupefinished()){
    
    
    ####SETTINGS#############################################################
    
    TextScale = 2 #How big is the text? Default is 1.5.
    TextAngle = 75 #How "angled" the text is. 90 is straight up and down, 0 is flat on the top of the car. Default is 75.
    
    Era = "1990s" #Set the Era string here. Use the same names as the Carspawner would.
    
    IndTurn = 25 #How many minutes it takes to change a car to unloaded once it reaches an industry (reccomended 20-30 mins)
    
    ####END_SETTINGS############################################################# 
    
    #From this point on, this data refers to Sunset Gulch with the Custom Track dupe placed.
    
    #Format: Tracks["internalname",table] = table("internalparentname","Display Name",vec(color xyz),vec(trigger zone higher coords), vec(trigger lower coords),vec(carspawner start point),carspawner start angle,turnaround time in minutes,array of spawn options
    
    Tracks["rockinter",table] = table("rockfort","Rockfort Interchange|Southbound",vec(150,30,150),vec(5264,7746,-8458),vec(3773,-3632,-8698),vec(5121,-3524,-8598),0,1,array())
    
    Tracks["rockind",table] = table("rockfort","Rockfort|Team Track",vec(0,191,255),vec(-2587,5843,-8497),vec(-2787,-2530,-8698),vec(-2687,-2430,-8597),0,IndTurn,array(10,"general_boxcar"))
    
    Tracks["godcement",table] = table("godfather","Godfather|Cement",vec(200,100,100),vec(-2349,-6043,-3698),vec(-8609,-6243,-3898),vec(-8506,-6145,-3798),-90,IndTurn,array(14,"cement_hopper"))
    Tracks["godchem",table] = table("godfather","Godfather|Chemical",vec(100,100,200),vec(-2376,-6545,-3698),vec(-5381,-9549,-3898),vec(-5283,-9447,-3798),-44,IndTurn,array(11,"chem"))
    Tracks["godteam",table] = table("godfather","Godfather|Team Track",vec(100,200,100),vec(1863,-6043,-3698),vec(-357,-6244,-3898),vec(1763,-6143,-3798),90,IndTurn,array(3,"general_flatcar",1,"general_boxcar"))
    
    Tracks["coaltipple",table] = table("derrickson","Derrickson|Coal Tipple",vec(150,100,50),vec(1304,-539,-3698),vec(-8276,-740,-3898),0.1,vec(1211,-639,-3798),90,IndTurn,array(17,"empty coal_hopper"))
    
    Tracks["derauto",table] = table("dereast","Derrickson|Auto Plant",vec(0,150,200),vec(13932,-10139,-3698),vec(-3614,-10750,-3898),vec(-3558,-10240,-3798),-89,IndTurn,array(15,"autoparts_boxcar"))
    Tracks["dergrain1",table] = table("dereast","Derrickson|Grain",vec(200,191,30),vec(12745,-14235,-3686),vec(8283,-14694,-3889),vec(12645,-14593,-3789),90,IndTurn,array(8,"grain_hopper"))
    Tracks["dergrain2",table] = table("dereast","Derrickson|Grain",vec(200,191,30),vec(12745,-14235,-3689),vec(8283,-14694,-3889),vec(12642,-14335,-3789),90,IndTurn,array(8,"grain_hopper")) #comment this line out if you don't have custom industries enabled
    
    Tracks["katl1",table] = table("kahuna","Atlantic|Shipping",vec(191,255,0),vec(3683,-2458,-2014),vec(-1355,-3184,-2234),vec(3582,-2561,-2134),91,IndTurn,array(9,"general_boxcar"))
    Tracks["katl2",table] = table("kahuna","Atlantic|Shipping",vec(191,255,0),vec(3682,-2458,-2014),vec(-1355,-3184,-2234),vec(3567,-3072,-2134),89,IndTurn,array(9,"general_boxcar"))
    Tracks["kold",table] = table("kahuna","Kahuna|Cold Storage",vec(50,150,255),vec(2823,2405,-2022),vec(-149,2204,-2234),vec(2725,2305,-2133),90,IndTurn,array(6,"reefer insulated"))
    #Tracks["kteam",table] = table("kahuna","Kahuna|Team Track",vec(255,191,0),vec(4657,5299,-2083),vec(-2555,5199,-2184),vec(4607,5121,-2133),89,IndTurn,array(1,"general_boxcar")) 
    Tracks["koil1",table] = table("kahuna","Kahuna|Oil",vec(50,100,50),vec(3810,10597,-2033),vec(-402,10140,-2234),vec(3710,10240,-2134),90,IndTurn,array(8,"oil_tanker"))
    Tracks["koil2",table] = table("kahuna","Kahuna|Oil",vec(50,100,50),vec(3810,10597,-2033),vec(-402,10140,-2234),vec(1445,10495,-2134),89,IndTurn,array(2,"chem",2,"general_boxcar"))
    Tracks["kscrap",table] = table("kahuna","Kahuna|Scrapyard",vec(150,60,20)+50,vec(-13467,9954,-2034),vec(-13669,5966,-2234),vec(-13568,9854,-2134),180,IndTurn,array(7,"empty scrap"))
    
    Tracks["rind",table] = table("redwall","Redwall|Remanufacturing",vec(180,80,30),vec(-2139,11081,150),vec(-2341,4207,-58),vec(-2239,10982,43),180,IndTurn,array(11,"general_boxcar"))
    Tracks["roil1",table] = table("redwall","Redwall|Refinery",vec(100,30,30),vec(7013,2914,143),vec(6555,-1577,-58),vec(6912,2814,42),-180,IndTurn,array(5,"oil_tanker",3,"chem")) #total 8
    Tracks["roil2",table] = table("redwall","Redwall|Refinery",vec(100,30,30),vec(7013,2914,143),vec(6555,-1577,-58),vec(6656,2814,42),-180,IndTurn,array(5,"oil_tanker",3,"chem")) #total 8
    Tracks["rtun1",table] = table("redwall","Redwall|Tunnel Lumber",vec(100,200,30),vec(14453,2018,143),vec(13723,-5695,-58),vec(14335,-386,42),179,IndTurn,array(4,"general_boxcar",4,"empty wood",2,"loaded log_flatcar")) #total 10
    Tracks["rtun2",table] = table("redwall","Redwall|Tunnel Lumber",vec(100,200,30),vec(14454,2018,143),vec(13723,-5695,-58),vec(13824,1918,42),-180,IndTurn,array(5,"general_boxcar",5,"empty wood",3,"loaded log_flatcar")) #total 13
    
    Tracks["rsan1",table] = table("redwall","Sandstone|Power",vec(255,191,0),vec(-10469,-1059,998),vec(-10367,-959,1194),vec(-9983,-2121,1194),-180,IndTurn,array(8,"loaded coal_hopper"))
    Tracks["rsan2",table] = table("redwall","Sandstone|Power",vec(255,191,0),vec(-10469,-1059,998),vec(-10367,-959,1194),vec(-9728,-1872,1194),-180,IndTurn,array(8,"loaded coal_hopper"))

    Tracks["drockinter",table] = table("drock","Dragons Rock|Interchange",vec(100,120,150)*1.5,vec(13700,9685,2200),vec(13083,-3046,1999),vec(14549,9975,2099),95,1,array())
    
    Tracks["coalstorage",table] = table("derrickson","Derrickson|Coal Tipple",vec(255,191,0),vec(1427,-770,-3748),vec(-8228,-1201,-3848),vec(1377,-820,-3798),109)
    
    Tracks["wol1",table] = table("wolfram","Wolfram Yard 1",vec(255,191,0),vec(-11419,9097,2190),vec(-11621,-10407,1990),vec(-11521,-10294,2090),0)
    Tracks["wol2",table] = table("wolfram","Wolfram Yard 2",vec(255,191,0),vec(-11675,8404,2191),vec(-11877,-9627,1990),vec(-11777,-9533,2090),0)
    Tracks["wol3",table] = table("wolfram","Wolfram Yard 3",vec(255,191,0),vec(-11931,7565,2191),vec(-12133,-8870,1990),vec(-12033,-8761,2090),0)
    Tracks["wol4",table] = table("wolfram","Wolfram Yard 4",vec(255,191,0),vec(-12187,6862,2191),vec(-12389,-8103,1990),vec(-12287,-8000,2090),0)
    Tracks["wol5",table] = table("wolfram","Wolfram Yard 5",vec(255,191,0),vec(-12444,6028,2190),vec(-12645,-7338,1990),vec(-12545,-7219,2090),0)
    Tracks["wol6",table] = table("wolfram","Wolfram Yard 6",vec(255,191,0),vec(-12601,6282,2191),vec(-12901,-7499,1990),vec(-12722,-7390,2090),18)
    
    Tracks["der1",table] = table("derrickson","Derrickson Yard 1",vec(255,191,0),vec(4816,1077,-3698),vec(-4384,795,-3898),vec(-4282,897,-3798),-90)
    Tracks["der2",table] = table("derrickson","Derrickson Yard 2",vec(255,191,0),vec(5410,1509,-3698),vec(-2848,1307,-3898),vec(-3506,1153,-3798),-90)
    Tracks["der3",table] = table("derrickson","Derrickson Yard 3",vec(255,191,0),vec(4647,1252,-3698),vec(-3614,1051,-3898),vec(-2735,1408,-3798),-90)
    Tracks["der4",table] = table("derrickson","Derrickson Yard 4",vec(255,191,0),vec(6098,1765,-3698),vec(-2997,1491,-3898),vec(-2905,1589,-3798),-71)
    
    Tracks["rock1",table] = table("rockfort","Rockfort Yard 1",vec(255,191,0),vec(-11803,3003,-8497),vec(-12005,-8862,-8698),vec(-11903,-8767,-8598),0)
    Tracks["rock2",table] = table("rockfort","Rockfort Yard 2",vec(255,191,0),vec(-11547,3800,-8497),vec(-11749,-8097,-8698),vec(-11647,-7992,-8598),0)
    Tracks["rock3",table] = table("rockfort","Rockfort Yard 3",vec(255,191,0),vec(-11291,4512,-8497),vec(-11493,-7331,-8698),vec(-11392,-7208,-8598),0)
    Tracks["rock4",table] = table("rockfort","Rockfort Yard 4",vec(255,191,0),vec(-11035,5162,-8497),vec(-11314,-7498,-8698),vec(-11211,-7387,-8598),-17)
    
    
    Tracks["wolfram",table] = table("","Wolfram Yard",vec(50,50,200),vec(-10500,14177,2191),vec(-12901,-13382,1990),0.01)
    Tracks["drock",table] = table("wolfram","Dragons|Rock",vec(50,100,100)*2,vec(15205,14691,2203),vec(11267,-14692,1998),0.01)
    Tracks["redwall",table] = table("wolfram","Redwall",vec(255,93,0)+40,vec(2692,14712,1390),vec(-9147,9158,-200),0.01)
    Tracks["kahuna",table] = table("derrickson","Kahuna",vec(50,200,200),vec(4324,12901,-2032),vec(-13669,-2955,-2234),0.01)
    Tracks["derrickson",table] = table("wolfram","Derrickson Yard",vec(50,200,50),vec(11310,1763,-3688),vec(-9857,-229,-3898),0.01)
    Tracks["godfather",table] = table("derrickson","Godfather",vec(150,200,50),vec(6411,-5019,-3697),vec(-8546,-9317,-3898),0.01)
    Tracks["dereast",table] = table("derrickson","Derrickson East",vec(50,200,150),vec(14049,-13768,-3690),vec(-11958,-14949,-3898),0.01)
    Tracks["rockfort",table] = table("wolfram","Rockfort Yard",vec(250,75,50)*0.8,vec(-10509,7488,-8497),vec(-12517,-13526,-8698),0.01)
    
    Interchanges = array("drockinter",0.7,"rockinter",0.2)
    
    #End data file
    
    
    ### Functions
    
    function vector newabs(V:vector){
        
        return vec(abs(V:x()),abs(V:y()),abs(V:z()))
        
    }
    
    function string swap(S:string){
        
        if(S:find("empty")){
            
            return S:replace("empty","loaded")
            
        }else{
            
            return S:replace("loaded","empty")
            
        }
        
    }

    function number within(V:vector,S:string){
        
        #S is the location code for the current target location
        
        local CX = Tracks[S,table][4,vector]
        local CN = Tracks[S,table][5,vector]
        
        local Er = 0
        
        Er = ((CX:x() >= V:x()) + (CX:y() >= V:y()) + (CX:z() >= V:z()) + (CN:x() <= V:x()) + (CN:y() <= V:y()) + (CN:z() <= V:z()) == 6)
        
        return Er
        
    }
    
    function startTimer(S:string){
        
        Timers[S,number] = 1
        
        Ents[S,table][5,number] == 1
        
        timer(S,max(Tracks[Ents[S,table][3,array][1,string],table][8,number],0.1)*60000)
        
    }
    
    #determines a route through the system based on my routing algorithm (might rebuild this with the train-path system)
    function array route(Start:string,End:string){
        
        ListA = array(Start)
        
        local Check = "|"+Start
        
        local Explor = Start
        
        while(Tracks[Explor,table][1,string] != ""){
        
            Explor = Tracks[Explor,table][1,string]
            ListA:pushString(Explor)
            Check = Check + "|"+Explor
            
        }
        
        if(!Check:find("|"+End)){
            
            ListB = array(End)
            Explor = End
        
            while(Tracks[Explor,table][1,string] != "" & !Check:find(Tracks[Explor,table][1,string])){
                
                Explor = Tracks[Explor,table][1,string]
                ListB:insertString(1,Explor)
                
            }
            
        }
        
        while(ListA[ListA:count(),string] != Tracks[ListB[1,string],table][1,string] & ListA[ListA:count(),string] != End){
        
            ListA:remove(ListA:count())
            
        }
        
        local Route = ListA:add(ListB)
        
        if(Tracks[Start,table][6,vector] != vec(0) & Route:count() > 2){
        
            Route:remove(2)
            
        }
        
        Route:remove(1)
        
        return Route
        
    }
    
    
    function printM(Print:string){ #Fancy print
        
        local P = Print:explode("||")
        
        P[1,string] = "TextMarker: "+P[1,string]
        
        for(X = 1,P:count()){
            
            printColor(vec(60,70,150)*1.8,P[X,string])
            
        }
        
    }
    
    #roll for a random number using my roller arrays
    function string rollW(D:array,Not:string){
        
        #local GlobUse = minquota()
        
        #example: Dat = (3, 1, data1, 3, data2)
        #roll 2
        #is 3 higher or equal to 2? No.
        #is 3 higher or equal to 3? Yes. 
        
        local Dat = D:clone()
        
        local Bad = Tracks[Not,table][2,string]
        local Fine = (Not == "")
        
        while(Dat:count()){
        
            local Needle = random(0,Dat[1,number])
            
            for(Y = 1,(Dat:count()-1)/2){
            
                if(Dat[(Y*2),number] >= Needle){
                    
                    if(Fine || (Tracks[Dat[(Y*2)+1,string],table][2,string] != Bad)){
                        
                        return Dat[(Y*2)+1,string]
                        
                    }else{
                        
                        Dat:remove(Y*2+1)
                        Dat:remove(Y*2)
                        
                    }
                    
                }
                
                
            }
            
        }
        
        return ""
        
    }

    #Text application function    
    function table textmarker(Str:string,Ent:entity,Vec:vector,Pos:vector,NoTouch){
        
        local Mesh = entity()
        
        local Box = Ent:boxSize()
        
        local T = Str:explode(" ")
        local TextIn = T2 = Display = ""
        local Length = floor(max(Box:x(),Box:y())/(12.5*TextScale))
        
        
        if(Holos){
            
            Mesh = holoCreate(HID,Ent:boxCenterW()+vec(0,0,Box:z()/2 + 3*6),vec(3),ang(0,0,0),Vec,"models/sprops/misc/alphanum/alphanum_"+Str:index(1):lower()+".mdl")
            "models/sprops/misc/alphanum/alphanum_"+Str:index(1):lower()+".mdl"
            holoParent(HID,Ent)
            holoMaterial(HID,"debug/debugdrawflat")
            HID++
            
        }else{
        
            #If the text contains pre-set divisions ( | ), then don't parse the text
            if(NoTouch){
                
                Display = Str
                
            }else{
                
                #While there's text left to parse, keep adding it to TextIn while adding spaces at regular intervals determined by the length of the car.
                while(T:count() & !NoTouch){
                    
                    if((T2 +" "+ T[1,string]):length() <= Length){
                        T2 = T2 +" "+ T[1,string]
                    }else{
                        TextIn = TextIn + T2 +"|"
                        T2 = T[1,string]
                    }
                    
                    T:remove(1)
                    
                }
                
                Display = (TextIn + T2):trim()
                
            }
            
            local Bloc = Display:upper():explode("|")
            local Ang = (Box:x() > Box:y() ? 90 : 0)+Ent:angles():yaw()
            
            if(Ent:toWorld(ang(0,Ang,0)):yaw() > 45 & TextAngle == 0){Ang = Ang + 180} #Special thing that rotates the text 180 degrees to prevent 2 cars having markers facing opposite
            
            Mesh = p2mCreate(1,Ent:boxCenterW(),ang(0,Ang,0),16,vec(1))
            #I would totally use MeshScale, but for some reason it's broken on some servers? wat
            
            Mesh:p2mSetMaterial("debug/debugdrawflat")
            Mesh:p2mSetColor(Vec*1.1)
            Mesh:p2mSetParent(Ent)
            
            local Hypotenuse = ((Bloc:count()-1)*14)+10
            local Centr = (vec(0,0,4 + Hypotenuse*sin(TextAngle) + (Box:z()/2 + 2)/TextScale))*TextScale
            local Up = 0
            
            if(TextAngle == 0){ #if angle is flat, move the text to the center.
                
                Up = (-Bloc:count()*7 -10 + 7)
                
            }
            
            
            
            for(Y = 1, Bloc:count()){ #For each layer of the text
                
                local Text = Bloc[Y,string]:explode("")
                local Back = -Text:count()*6-24
                
                local ID = array()
                
                #For each text model, set the bodygroup and create 2 copies: one on each side if the text is not flat.
                
                for(X = 1,ceil(Text:count()/4)){    
                    
                    Bod = 0
                    
                    for(Z = 1, 4){
                        
                        local Byte = toByte(Text[(X*4)+Z-4,string])-65
                        
                        if(Byte < 0 | Byte >= 26){Byte = 26}
                        
                        Bod = Bod + Byte*(27^(Z-1))
                        
                    }
                    
                    Mesh:p2mPushModel(1,"models/magtrains/reportingmark.mdl",array(1),
                    Centr+TextScale*vec(((Y-1)*14)+10+Up,Back+(X*48),0):rotateAroundAxis(vec(0,1,0),TextAngle),# + Position,
                    ang(0,0,0):rotateAroundAxis(vec(0,1,0),TextAngle),
                    vec(TextScale),0,0,Bod)
                    
                    if(TextAngle != 0){
                        Mesh:p2mPushModel(1,"models/magtrains/reportingmark.mdl",array(1),
                        (Centr+TextScale*vec(((Y-1)*14)+10,Back+(X*48),0):rotateAroundAxis(vec(0,1,0),TextAngle)):rotateAroundAxis(vec(0,0,1),180),# + Position,
                        ang(0,0,0):rotateAroundAxis(vec(0,1,0),TextAngle):rotateAroundAxis(vec(0,0,1),180),
                        vec(TextScale),0,0,Bod)
                    }
                    
                }
                
            }
            
            Mesh:p2mBuild()
            
        }
        
        return table(Mesh,Str,Vec,Pos)
        
    }   
    
    #text for world markers
    function textworld(Str:string,Pos:vector,Ang){ 
        
        Display = Tracks[Str,table][2,string]
        Vec = Tracks[Str,table][3,vector]
        
        local Bloc = Display:upper():explode("|")
        
        local Mesh = p2mCreate(1,Pos,ang(0,Ang,0),16,vec(1))
        #I would totally use MeshScale, but for some reason it's broken on some servers? wat
        
        Mesh:p2mSetMaterial("debug/debugdrawflat")
        Mesh:p2mSetColor(Vec*1.1)
        
        local Hypotenuse = ((Bloc:count()-1)*14)+10
        local Centr = vec(0)

        for(Y = 1, Bloc:count()){ #For each layer of the text
            
            local Text = Bloc[Y,string]:explode("")
            local Back = -Text:count()*6-24
            
            local ID = array()
            
            #For each text model, set the bodygroup and create 2 copies: one on each side if the text is not flat.
            
            for(X = 1,ceil(Text:count()/4)){    
                
                Bod = 0
                
                for(Z = 1, 4){
                    
                    local Byte = toByte(Text[(X*4)+Z-4,string])-65
                    
                    if(Byte < 0 | Byte >= 26){Byte = 26}
                    
                    Bod = Bod + Byte*(27^(Z-1))
                    
                }
                
                Mesh:p2mPushModel(1,"models/magtrains/reportingmark.mdl",array(1),
                Centr+4*vec(((Y-1)*14)+10,Back+(X*48),0):rotateAroundAxis(vec(0,1,0),90),# + Position,
                ang(0,0,0):rotateAroundAxis(vec(0,1,0),90),
                vec(4),0,0,Bod)
                
            }
            
        }
        
        Mesh:p2mBuild()
        
    }
    
    
    ### Precalculated stuff
    
    #allows it to communicate with the carspawner with datasignals
    dsJoinGroup("operations")
    
    #starting the repeating timer for checking if cars are within triggers
    timer("check",2000)
    
    
    #pull out types from Tracks and use them to lay the foundation for the router
    local K = Tracks:keys()
    local ApprovedTypes = array()
    
    for(X = 1, K:count()){
        
        local Dat = Tracks[K[X,string],table][9,array]
        
        for(Y = 1,Dat:count()){
            
            local Dat2 = Dat[Y,string]
            
            if(Dat2 != ""){

                Router[Dat2,array] = array(0)
                Router[swap(Dat2),array] = array(0)
                
            }
            
        }
        
    }
    
    InterCheck = ""
    
    for(X = 1,Interchanges:count()){
        
        InterCheck = InterCheck + Interchanges[X*2-1,string]+"|"
        
    }
    
    #vars for test train spawn (see below)
    local Table = table()
    local TT = 1
    
    #essential variable
    local Default = table()
    
    for(X = 1, K:count()){
        
        Index = K[X,string]
        local Tl = Tracks[Index,table]
        
        Pos1 = Tl[4,vector]
        Pos2 = Tl[5,vector]
        
        #marks the trigger zones with boxes
        #holoCreate(HID,(Pos1/2)+(Pos2/2),newabs((1/(48*8))*(Pos2-Pos1)),ang(0,0,0),Tl[3,vector],"models/hunter/blocks/cube8x8x8.mdl")
        #HID++
        
        local Rte = Tl[9,array]
        
        for(Y = 1,Rte:count()/2){
            
            local Q = Rte[Y*2-1,number]
            local D = Rte[Y*2,string]
            
            Router[D,array]:pushNumber(Router[D,array][1,number] + Q)
            Router[D,array]:pushString(Index)
            Router[D,array][1,number] =  Router[D,array][1,number] + Q
            
            Default[D,number] =  Default[D,number] + Q
            
        }
        
        #this code is just for the bit below this, not super nessecary
        Type = Rte[2,string]
        Count = Rte[1,number]
        
        if(Type != ""){
        
            Table[(TT*2-1):toString(),array] = array("summon",Tl[6,vector]+vec(0,0,20),Tl[7,number])
            Table[(TT*2):toString(),array] = array(".sp 0 "+Era+" "+swap(Type),vec(Count,0,0),Index)
            TT++
            
        }
        
        
    }
    
    #dsSend("populate","operations",Table) #this line sends a command to spawn 1 car of the correct type at every location to verify it works
    
    KD = Default:keys()
    Stock = array(0)
    
    for(X = 1,KD:count()){
        
        local K = KD[X,string]
        
        Stock:pushNumber(Stock[1,number] + Default[K,number])
        Stock[1,number] = Stock[1,number] + Default[K,number]
        Stock:pushString(K)
        
    }
    
    KA = Router:keys()
        
    for(X = 1,KA:count()){
        
        local Entry = KA[X,string]
        local Base = 1
        
        if(Router[Entry,array][1,number] == 0){
            
            Router[Entry,array][1,number] = 1
            
        }else{
            
            Base =  Router[Entry,array][1,number]
            
        }
        
        for(Y = 1,Interchanges:count()/2){
            
            local Add = Interchanges[Y*2,number] * Base
            
            Router[Entry,array][1,number] = Router[Entry,array][1,number] + Add
            Router[Entry,array]:pushNumber(Router[Entry,array][1,number])
            Router[Entry,array]:pushString(Interchanges[Y*2-1,string])
            
        }
        
        
    }
    
    
    #how the command to send back the data for car labeling works (carspawner side)
    #markthis = table(array(Frame:id(),Bogie1:id(),Bogie2:id()),Instr[1,table][6,string])
    
    #[ carspawner code demonstrating how the train command turns into spawn instructions
    if(Data[1,string] == "summon"){
        
        CommandStack:pushString(Time+" summon via populate")
        Instr:pushTable(table("goto",Data[2,vector],Data[3,number],1))
        
     }else{
    
        Instr:pushTable(table("clean"))
        Instr:pushTable(table("sp",Data[1,string],Data[2,vector],Data[3,string]))
        
        CommandStack:pushString(Time+" clean via pop")
        CommandStack:pushString(Time+" pop sp "+Data[1,string])   
        
    }]#
    
    
    
    #[
    
    pseudocode
    
    for selecting random cars in the wild:
    select a location to go to and car type (boxcar, coal, etc)
    click on car: override path with direct route to location, override type to type
    
    spawning procedure:
    
    player input or trigger by lack of cars in circulation
    
    give location and train type
    
    e2 determines roll of car types
    make stack of picked car types (repeat rolling several times)
    for each car, determine a next location, then create route 
    
    if location is singular:
    sort cars into blocks
    else:
    roll for every "industry" track (preset)
    
    compile all orders into 1 massive instruction, including teleports
    send order to carspawner and wait for carspawner to return "donezo" signal before considering new spawns (queue player orders?)
    
    as each car is created:
        compare current car location to destination
        create a route
        mark car
        save car data
        
    each tick:
        scan all cars for being inside bounding boxes
        if yes, advance marker to next location
        if no more locations:
            if car is at an outbound location, delete it
            else find a new target and generate a route
            
            
    industry data structure:
    parent, name, color, bouding box a, bounding box b, turnaround time, spawner pos, spawner ang, array of car type / weight pairs
    
    
    how to determine a next location:
    
    for every industry in the map, add it to the roller if it has capacity for the selected car type
    return the result of a weighted roll for location based on above
    
    
    
    note: create reverse lookup for locations IE given parent return children
    maybe this can be used to auto-fill train types and traffic patterns? mmm
    
    
    idea: to fix industry routing problem: industries are just spawning tracks, create normal locations AND separate routing table (unrelated to locations) for determining destinations, then just have it reference back to the "combined zone" for each industry
    ie: 2 spawning location tracks separate, 1 route-to location entity and combined trigger volume (like any other location), and auto-generated routing data based on industry input
    
    ]#
    

    
    #[mechanism for testing if it correctly makes routes between locations
    for(X = 1,10){
        
        R1 = K[randint(1,K:count()),string]
        R2 = K[randint(1,K:count()),string]
    
        print(route(R1,R2))
        
    }]#
    
    #failsafe for shennanigans
    TextAngle = clamp(floor(TextAngle),0,90)
    
    

    
    
    WorldMarks = table()

    WorldMarks:pushArray(array("rockinter",vec(3653,7170,-8448),90))
    WorldMarks:pushArray(array("rockind",vec(-2434,3214,-8447),180))
    WorldMarks:pushArray(array("godcement",vec(-3566,-6476,-3680),90))
    WorldMarks:pushArray(array("godchem",vec(-2919,-6856,-3680),315))
    WorldMarks:pushArray(array("coaltipple",vec(9,-254,-3593),90))
    WorldMarks:pushArray(array("dergrain1",vec(11120,-14018,-3642),180))
    WorldMarks:pushArray(array("derauto",vec(8189,-10498,-3631),270))
    
    WorldMarks:pushArray(array("katl1",vec(500,-2814,-1980),90))
    WorldMarks:pushArray(array("kold",vec(1160,2686,-1541),270))
    WorldMarks:pushArray(array("koil1",vec(270,10942,-1920),270))
    WorldMarks:pushArray(array("kscrap",vec(-12994,6393,-1964),180))
    
    WorldMarks:pushArray(array("rind",vec(-2430,7572,243),0))
    WorldMarks:pushArray(array("roil1",vec(6412,-228,205),360))
    WorldMarks:pushArray(array("rtun1",vec(13573,-5833,139),360))
    WorldMarks:pushArray(array("drockinter",vec(14081,-4350,2225),90))
    
    #WorldMarks:pushArray(array("rsan1",vec(-10558,-3045,1324),0))
    
    WorldMarks:pushArray(array("rsan1",vec(-10931,1362,1260),271))
    WorldMarks:pushArray(array("godteam",vec(386,-6910,-3350),90))
    
    
    
    LocsToMark = WorldMarks:keys()
    
    runOnChat(1)

}

if(dupefinished()){reset()}
if(dsClk("markthis")){ ##MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER####MARKER##
    
    T = dsGetTable()
    
    local GoTo = T[2,string]:explode("|")[1,string]
    local Loc = T[2,string]:explode("|")[2,string]
    local Type = T[2,string]:explode("|")[3,string]
    
    local Route = route(Loc,GoTo)
    
    local Dat = Tracks[Route[1,string],table]
    
    Ents[T[1,array][1,number]:toString(),table] = table(textmarker(Dat[2,string],entity(T[1,array][1,number]),Dat[3,vector],vec(0),1),Type,Route,T[1,array])

}

if(chatClk(owner())){ #Text parser
    
    local LSC = owner():lastSaid():lower():trim() 
    local LSCE = LSC:explode(" ")
    
    if(LSCE[1,string] == ".data"){
        
        printTable(Ents[owner():aimEntity():id():toString(),table])         
        
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".holos"){
        
        Holos = !Holos

        RespawnTags = Ents:keys()
        
        printM("Holos postion set to "+Holos+"; respawned all tags.")
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".fix"){

        RespawnTags = array(owner():aimEntity():id():toString())
        
        printM("Respawned tag of "+RespawnTags[1,string])
        hideChat(1)
        
    }elseif(LSCE[1,string] == ".train"){
        
        local Table = table()
        local TT = 1
        
        local Count = LSCE[2,string]:toNumber()
        local Loc = LSCE[3,string]
        
        if(Loc == "sunset"){ #spawn trains at industries
            
            local R2 = table()
            
            for(X = 1,Count){
                
                local Type = rollW(Stock,"")
                
                local Loc2 = rollW(Router[Type,array],"")
                
                while(InterCheck:find(Loc2+"|")){
                    
                    Type = rollW(Stock,"")
                    Loc2 = rollW(Router[Type,array],"")
                    
                }
                
                local GoTo = rollW(Router[Type,array],Loc2)
                
                if(R2[Loc2,table]:count() == 0){
                    
                    R2[Loc2,table] = table()
                    
                }   
                R2[Loc2,table]:pushArray(array(".sp 0 "+Era+" "+Type,vec(1,0,0),GoTo+"|"+Loc2+"|"+Type))

            }
            
            local K = R2:keys()
            
            for(X = 1,K:count()){
                
                Tl = Tracks[K[X,string],table]
                
                Table[(TT):toString(),array] = array("summon",Tl[6,vector]+vec(0,0,20),Tl[7,number])
                TT++
                
                local Add = R2[K[X,string],table]
                
                for(Y = 1,Add:count()){
                    
                    Table[(TT):toString(),array] = Add[Y,array]
                    TT++
                    
                }
                
            }
            
            Table[(TT):toString(),array] = array("summon",vec(0),0)
            
            ToSendOut = Table
            
            printM("spawned "+Count+" cars at \"sunset\"")
            
        }else{ #spawn trains normally
            
            local Iter = 0
            local Cap = 0
            local OvType = ""
            
            local Extra = LSC:explode("|")[2,string]
            
            if(Extra != ""){
                
                OvType = Extra
                
            }
                
            Tl = Tracks[Loc,table]
            
            if(Tl[6,vector] != vec(0)){
                
                local Adder = table()
            
                Table[(TT):toString(),array] = array("summon",Tl[6,vector]+vec(0,0,10),Tl[7,number])
                TT++
                
                for(X = 1,Count){
                    
                    Min = maxquota()
                    local Type = ""
                    
                    if(OvType == ""){
                    
                        Type = rollW(Stock,"")
                        
                    }else{
                        
                        Type = OvType
                        
                    }
                    
                    local GoTo = rollW(Router[Type,array],Loc)
                    
                    local Index = ""
                    
                    local Search = GoTo
                    
                    while(Search != ""){
                        
                        Index = Search + Index
                        
                        Search = Tracks[Search,table][1,string]
                        
                        
                    }
                    
                    for(Y = 1,Adder:count()+1){
                        
                        if(Index > Adder[Y,array][4,string]){
                    
                            Adder:insertArray(Y,array(".sp 0 "+Era+" "+Type,vec(1,0,0),GoTo+"|"+Loc+"|"+Type,Index))
                            break
                            
                        }
                         
                    }
                    
                    Cap = Cap + Min-maxquota()
                    Iter++
                    
                }
                
                print(Cap/Iter,Cap,Iter)
                
                for(X = 1,Adder:count()){
                    
                    Adder[X,array]:remove(4)
                    
                    Table[(TT):toString(),array] = Adder[X,array]
                    TT++
                    
                }
                
                dsSend("populate","operations",Table)
            
                printM("spawned train length "+Count+" at "+Loc)
                
            }else{
            
                printM("invalid track "+Loc)
                
            }
            
        }
        
        hideChat(1)
        
    }
    
}


if(clk("check")){
    
    timer("check",2000)
    
    local K = Ents:keys()
    
    for(X = 1,K:count()){
        
        local T = Ents[K[X,string],table]
        
        local Route = T[3,array]
        
        if(within(entity(T[4,array][1,number]):pos(),Route[1,string]) & T[5,number] != 1){
            
            startTimer(K[X,string])
            
        }elseif(entity(T[4,array][1,number]):pos() == vec(0)){
            
            Timers:remove(T[4,array][1,number]:toString())
            
            for(Y = 1,T[4,array]:count()){
                    
                entity(T[4,array][Y,number]):propDelete()
                
            }
            
            Ents:remove(K[X,string])
            
        }
        
    }
    
    while(LocsToMark:count() & minquota() > 3000){
        
        local A = WorldMarks[LocsToMark[1,number],array]
        textworld(A[1,string],A[2,vector],A[3,number])
        LocsToMark:remove(1)
        
    }
    
    while(RespawnTags:count() & maxquota() > 25000 & holoCanCreate()){
        
        local E = RespawnTags[1,string]
    
        local T = Ents[E,table]
    
        local Type = T[2,string]
        local Route = T[3,array]
        
        T[1,table][1,entity]:p2mRemove()
        T[1,table][1,entity]:propDelete()
        holoDelete(holoIndex(T[1,table][1,entity]))

        local Dat = Tracks[Route[1,string],table]
        
        Ents[E,table] = table(textmarker(Dat[2,string],entity(E:toNumber()),Dat[3,vector],vec(0),1),Type,Route,T[4,array])
        
        RespawnTags:remove(1)
           
    }
    
}

if(Timers[clkName(),number]){
    
    local E = clkName()
    
    Timers:remove(E)
    
    local T = Ents[E,table]
    
    local Type = T[2,string]
    local Route = T[3,array]
        
    T[1,table][1,entity]:p2mRemove()
    T[1,table][1,entity]:propDelete()
    holoDelete(holoIndex(T[1,table][1,entity]))

    if(Route:count() > 1){
        
        printM("\""+Type+"\" routed at "+Route[1,string])
        
        Route:remove(1)
        local Dat = Tracks[Route[1,string],table]
        
        Ents[E,table] = table(textmarker(Dat[2,string],entity(E:toNumber()),Dat[3,vector],vec(0),1),Type,Route,T[4,array])
        
    }else{
        
        if(Route[1,string] == "s1" | Route[1,string] == "n1"){
            
            for(Y = 1,T[4,array]:count()){
                
                entity(T[4,array][Y,number]):propDelete()
                
            }
            
            Ents:remove(E)
            
        }else{
            
            
            local Loc = Route[1,string]
            
            GoTo = rollW(Router[Type,array],Loc)
                        
            Route = route(Loc,GoTo)
            
            local Dat = Tracks[Route[1,string],table]
            
            Ents[E,table] = table(textmarker(Dat[2,string],entity(E:toNumber()),Dat[3,vector],vec(0),1),Type,Route,T[4,array])
            
        }
        
    }
    
}

Current_Carcount = Ents:keys():count()
    

if(ToSendOut != table() & minquota() > 3000){
    
    dsSend("populate","operations",ToSendOut)
    ToSendOut = table()
    
}






    
    

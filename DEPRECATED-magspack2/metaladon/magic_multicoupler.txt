@name Magic Multicoupler
@inputs Enable
@persist Rope_Width Extra_Length [MarkCar UnmarkCar ApplyHandbrakes ReleaseHandbrakes UncoupleCar ManualLink CancelManualLink]:string
@persist [CouplingTracker Pairs PairLookup]:table Delays:array ManualBogie:entity RID HID FeetToClosestCoupling CouplingMPH SecondsToCouple
@outputs FeetToClosestCoupling CouplingMPH SecondsToCouple


#This is a COMPLETE REWRITE of the original Magic Crowbar Coupler. Made by Sir Metaladon.
#To use, simply place the e2, and leftclick on cars to mark them for automatic coupling. 
#Hold Alt while sitting in a seat to perform actions on your locomotive. Additional controls below.

if(dupefinished()){reset()}

if(first()){
    
    #Thanks to NovaCheri for the E2 name!
    
    Rope_Width = 0    #Pretty self-explanatory. 10 is very thick, 0 is invisible.
    Extra_Length = 48 #For sitations where the bogie is showing the end of the car (like steam engines), manual adjustment to how far away it should be. 48 is default.
    
    MarkCar = "mouse_left"    #What key do you want to mark a car for coupling? Default "mouse_left"
    UnmarkCar = "mouse_right" #What key do you want to un-mark a car?           Default "mouse_right"
    UncoupleCar = "r"         #What key do you want to uncouple a car?          Default "r"
    ApplyHandbrakes = "k"     #What key do you want to apply the handbrakes?    Default "k"
    ReleaseHandbrakes = "l"   #What key do you want to release the handbrakes?  Default "l"
    ManualLink = "m"          #What key do you want to manually link cars with? Default "m"
    CancelManualLink = "r"    #What key do you want to cancel manual linking?   Default "r"
    
    #VERSION 1.21 - 1-25-24 minor update fixing bugreport by Nebula
    
    #These are the delays between certain types of scans. Just leave it like it is, adjusting this will probably cause problems
    Delays = array(50,50,500,1000,7000)
    RID = 1 #Rope ID variable
    
    runOnKeys(owner(),1)
    
    #Returns a "clean" model name for display
    function string mdlname(E:entity){
        
        return E:model():explode("/"):popString():replace(".mdl","")
        
    }
    
    #Returns a 90-degree rotational offset for the "long" end of the car
    function number getXvsY(E:entity){
        
        return (E:boxSize():x() > E:boxSize():y())*90
        
    }
    
    #Returns an array of 2 entities: One is the farthest "forward" bogie, the other is the farthest "back", according to the long x/y axis of E.
    function array determineBogies(E:entity,R:array){
        
        local WinP = WinN = 0
        local PositiveBogie = NegativeBogie = E
        local N = getXvsY(E)
            
        for(X = 1,R:count()){
            
            local Bog = R[X,entity]
                
            local Vecc = E:toLocal(Bog:pos()):rotateAroundAxis(vec(0,0,1),N-90)
            
            if(Bog:type() == "prop_physics"){
                
                if(Vecc:x() > WinP & Bog:hasConstraints("axis")){
                    
                    WinP = Vecc:x()
                    PositiveBogie = Bog
                    
                }
                
                if(Vecc:x() < WinN & Bog:hasConstraints("axis")){
                    
                    WinN = Vecc:x()
                    NegativeBogie = Bog

                }
                
            }
            
        }
        
        return array(PositiveBogie,NegativeBogie)
        
    }

    #Finds the largest model (x/y dimension wise) in an array of entites
    function entity getFrame(R:array){

        local Max = 0
        local F = entity()
            
        for(X = 1,R:count()){
            
            local Specimen = R[X,entity]
            
            if(Specimen:type() == "prop_physics" | Specimen:type() == "gmod_wire_expression2"){
                
                local M2 = max(Specimen:boxSize():x(),Specimen:boxSize():y())
                
                if(M2 > Max){
                    
                    Max = M2
                    F = Specimen

                }
                
            }
            
        }
        
        return F
        
    }
    
    #Flashes a hologram with V color on E entity for 0.75 seconds
    function flash(E:entity,V:vector){
        
        holoCreate(HID,E:pos(),vec(1.03),E:angles(),V,E:model())
        holoMaterial(HID, "debug/debugdrawflat")
        holoAlpha(HID,100)
        timer("holodelete|"+HID,750)
        holoParent(HID,E)
        HID++
        
    }
    
    #Does all the functions of uncoupling: Sound, break rope, flash bogies, hint
    function uncouple(E:entity,S:string){
        
        local A = E:getConnectedEntities("rope")
        
        for(X = 1, A:count()){
            
            flash(A[X,entity],vec(255,50,0))
            
        }
                
        owner():soundPlay(0,2,"gsgtrainsounds/misc/uncouple.wav")
        hint("Uncoupled \"" + S,3)
        
        E:constraintBreak("rope")
        
    }
    
    #Does all the functions of coupling (once you've decided you can): Flashes bogies, hint, sound, makes rope
    function couple(E1:entity,E2:entity,S:string){
        
        flash(E1,vec(50,255,0))
        flash(E2,vec(50,255,0))
            
        hint("Coupled "+S,3)
        owner():soundPlay(0,2,"gsgtrainsounds/misc/couple.wav")
        
        rope(RID,E1,E1:massCenterL(),E2,E2:massCenterL(),0,Rope_Width,"cable/cable2",1),RID++
        #rope(number index,entity ent1,vector v1,entity ent2,vector v2,number addlength,number width,string mat,number rigid)
        
    }
    
    #Pretty self-explanatory. An improved parent-finder with recursive functionality.
    function entity getParent(E:entity){
        
        if(E:parent():isValid()){
            
            Out = getParent(E:parent())
            
        }else{
            
            Out = E
            
        }
            
        return Out
    
    }
    
    #Creates a timer, and ticks down the remaining reiterations of this coupling stage
    function newTimer(UID:string){
        
        stoptimer(UID)
        timer(UID,Delays[Pairs[UID,array][1,number],number])
        Pairs[UID,array][2,number] = clamp(Pairs[UID,array][2,number]-1,-1,inf())
        
    }
    
    #Creates a new pair of cars to track, as well as the timer and logic infrastructure
    function newPair(E1:string,E2:string){
        
        PairLookup[E1,array]:pushString(E2)
        PairLookup[E2,array]:pushString(E1)

        local UID = min(E1:toNumber(),E2:toNumber()) +"|"+ max(E1:toNumber(),E2:toNumber())

        Pairs[UID,array] = array(5,-1,0,0)
        
        stoptimer(UID)
        timer(UID,50)
        
    }
    
    #Stops tracking the car with entity number S, cleans up Live and Pairs databases
    function stopTracking(S:string){
        
        CouplingTracker:remove(S)
        local Ar = PairLookup[S,array]
        for(L = 1, Ar:count()){
            
            Pairs:remove(S+"|"+Ar[L,string])
            
        }
        PairLookup:remove(S)
        
    }
    
    #timer to kick off the scanning process
    timer("update",50)
    #starts the timer that updates the distance
    timer("updateDist",500)

}elseif(keyClk() & (Enable | !->Enable)){
    
    local Key = keyClkPressed()
    local Pressed = owner():keyPressed(Key)
    
    if(Pressed == 1){
        
        local AimEntity = noentity()
        
        if(owner():inVehicle()){
        
            AimEntity = getParent(owner():vehicle())
    
        }else{
            
            AimEntity = owner():aimEntity()
            
        }
        
        if(AimEntity:isValidPhysics() & ((AimEntity:boxSize():x() + AimEntity:boxSize():y() > 60) | owner():inVehicle())){
            
            local Ents = AimEntity:getConnectedEntities("axis","ballsocket","advballsocket","weld")
    
            local Frame = getFrame(Ents)
            local ES = Frame:id():toString()
            
            #if the owner is leftclicking with the crowbar and not in a vehicle, or the owner is holding alt+click while in a vehicle
            
            if(Key == MarkCar  & ((owner():weapon():type() == "weapon_crowbar" & !owner():inVehicle()) | (owner():inVehicle() & (owner():keyPressed("lalt") | owner():keyPressed("ralt"))))){
                
                local X_more_than_Y = getXvsY(Frame)
                
                local Parts = determineBogies(Frame,Ents)
                local PositiveBogie = Parts[1,entity]
                local NegativeBogie = Parts[2,entity]
                
                local FurthestPositive = FurthestNegative = 0
                local FarPosEnt = FarNegEnt = Frame
                    
                for(X = 1,Ents:count()){
                    
                    local Bog = Ents[X,entity]
                        
                    local Vecc = Frame:toLocal(Bog:pos()):rotateAroundAxis(vec(0,0,1),X_more_than_Y-90)
                    
                    if(Bog:type() == "prop_physics"){
                        
                        if(Vecc:x() > FurthestPositive){
                            
                            FurthestPositive = Vecc:x()
                            FarPosEnt = Bog
                            
                        }
                        
                        if(Vecc:x() < FurthestNegative){
                            
                            FurthestNegative = Vecc:x()
                            FarNegEnt = Bog
        
                        }
                        
                    }
                    
                }
                
                local PosEntSize = max(FarPosEnt:boxSize():x(),FarPosEnt:boxSize():y())/2
                local NegEntSize = max(FarNegEnt:boxSize():x(),FarNegEnt:boxSize():y())/2
                
                local PosExtraLen = Extra_Length * ((max(Frame:boxSize():x(),Frame:boxSize():y())/2) < (FurthestPositive+PosEntSize))
                local NegExtraLen = Extra_Length * ((max(Frame:boxSize():x(),Frame:boxSize():y())/2) < (-FurthestNegative+NegEntSize))
                
                local CarLengthP = max(max(Frame:boxSize():x(),Frame:boxSize():y()) / 2,FurthestPositive+PosExtraLen+PosEntSize)
                local CarLengthN = max(max(Frame:boxSize():x(),Frame:boxSize():y()) / 2,-FurthestNegative+NegExtraLen+NegEntSize)
                
                local EndCircleRadius = (CarLengthP + CarLengthN)/6 #this calculation can be whatever you like, and it should only change the shape of the coupling at the end of the car
                            
                local CanCouplePositive = (!PositiveBogie:hasConstraints("rope") | PositiveBogie == Frame)
                local CanCoupleNegative = (!NegativeBogie:hasConstraints("rope") | NegativeBogie == Frame)
                
                if(CanCouplePositive | CanCoupleNegative){
                    
                    #If this is a new Live entry, generate new pairs for all existing cars
                        
                    PairLookup[ES,array] = array()
                    local K = CouplingTracker:keys()
                    for(X = 1,K:count()){
                        
                        if(K[X,string] != ES){
                            
                            newPair(ES,K[X,string])
                            
                        }
                            
                    }
                    
                    Dir = vec(1,0,0):rotateAroundAxis(vec(0,0,1),90-X_more_than_Y)
                
                    CouplingTracker[ES,table] = table(
                    "EndCirRad" = EndCircleRadius,
                    "Dir" = Dir,
                    "PLen" = CarLengthP-EndCircleRadius,
                    "NLen" = CarLengthN-EndCircleRadius,
                    "XvsY" = X_more_than_Y,
                    "PBog" = PositiveBogie,
                    "NBog" = NegativeBogie,
                    "PCoup" = CanCouplePositive,
                    "NCoup" = CanCoupleNegative
                    )
                    
                    #[holo for determining which end is the "positive" end + coupling radius
                    holoCreate(HID,Frame:toWorld(Dir*(CarLengthP)),vec(6),ang(0),vec(255),"models/editor/axis_helper.mdl")
                    holoParent(HID,Frame)
                    HID++
                    holoCreate(HID,Frame:toWorld(-Dir*(CarLengthN)),vec(6),ang(0),vec(0),"models/editor/axis_helper.mdl")
                    holoParent(HID,Frame)
                    HID++
                    #]#
                    
                }
                
                flash(Frame,vec(255,255,0))
                    
                hint("Marked \"" + mdlname(Frame) + "\" #"+ES+" for coupling.",3)
                owner():soundPlay(0,2,"buttons/button3.wav")
              
            }elseif(Key == UnmarkCar & ((owner():weapon():type() == "weapon_crowbar" & !owner():inVehicle()) | (owner():keyPressed("lalt") | owner():keyPressed("ralt")))){
                
                if(CouplingTracker[ES,table]:count() != 0){
                
                    hint("Un-marked \"" + mdlname(Frame) + "\" #"+ES+" from coupling.",3)
                    owner():soundPlay(0,2,"buttons/button19.wav")
                    stopTracking(ES)
                    
                }
                
            }elseif(Key == ReleaseHandbrakes){
                
                flash(Frame,vec(255,191,0)) 
                local Ent2 = AimEntity:getConnectedEntities("axis","ballsocket","advballsocket","rope","weld")
                for(X = 1, Ent2:count()){
                    
                    Ent2[X,entity]:propPhysicalMaterial("friction_00")
                    Ent2[X,entity]:propFreeze(0)
                    #flash(Ent2[X,entity],vec(255,191,0))
                    
                }
                
                hint("Released the handbrakes on the consist.",3)
                owner():soundPlay(0,1,"buttons/button4.wav")     
                
            }elseif(Key == ApplyHandbrakes){
    
                for(X = 1, Ents:count()){
                    
                    Ents[X,entity]:propPhysicalMaterial("phx_tire_normal")
                    flash(Ents[X,entity],vec(255,90,10))
                    
                }
                
                hint("Set the handbrakes on \"" + mdlname(Frame) + "\" #"+ES+"",3)
                owner():soundPlay(0,1,"buttons/lever4.wav")         
                
            }elseif(Key == UncoupleCar & ((owner():weapon():type() == "weapon_crowbar" & !owner():inVehicle()) | (owner():inVehicle() & (owner():keyPressed("lalt") | owner():keyPressed("ralt"))))){
                
                local Parts = determineBogies(Frame,Ents)
                local PositiveBogie = Parts[1,entity]
                local NegativeBogie = Parts[2,entity]
                
                if(AimEntity:hasConstraints("rope")){
                    
                    uncouple(AimEntity,mdlname(Frame) + "\" #"+ES+"")
                 
                #[ #Function for uncoupling the 1 remaining coupler if only 1 remains, removed because it makes things inconsistient and Grove didn't like it   
                }elseif(PositiveBogie:hasConstraints("rope") + NegativeBogie:hasConstraints("rope") == 1){
                    
                    PositiveBogie:constraintBreak("rope")
                    NegativeBogie:constraintBreak("rope")
                    
                    owner():soundPlay(0,2,"gsgtrainsounds/misc/uncouple.wav")
                    hint("Uncoupled \"" + (Frame:model()) + "\" #"+ES+"",3)]#
                
                }else{ 
                    
                    local AimPositive = 0
                    
                    if(!owner():inVehicle()){
                        
                        AimPositive = Frame:toLocal(owner():aimPos()):rotateAroundAxis(vec(0,0,1),getXvsY(Frame)-90):x()
                        
                    }else{
                        
                        local AimAng = owner():eyeAngles():rotateAroundAxis(vec(0,0,1),getXvsY(Frame)-90-Frame:angles():yaw()):yaw()
                        
                        if(AimAng < 90 & AimAng > -90){
                            AimPositive = 1
                        }else{
                            AimPositive = -1
                        }

                    }
                    
                    if(AimPositive > 0){
                        
                        if(PositiveBogie:hasConstraints("rope")){
                            
                            uncouple(PositiveBogie,mdlname(Frame) + "\" #"+ES+"")
                            CouplingTracker[ES,table]["PCoup",number] = 0 
                       
                        }
                        
                    }else{
                        
                        if(NegativeBogie:hasConstraints("rope")){
                                
                            uncouple(NegativeBogie,mdlname(Frame) + "\" #"+ES+"")
                            CouplingTracker[ES,table]["NCoup",number] = 0 
                            
                        }
                        
                    }
                    
                }
                
            }elseif(Key == ManualLink & !owner():inVehicle()){
                
                if(ManualBogie:isValidPhysics() & ManualBogie != AimEntity){
                    
                    couple(AimEntity,ManualBogie,"2 bogies manually.")
                    ManualBogie = noentity()
                    
                }else{
                    
                    ManualBogie = AimEntity
                    flash(ManualBogie,vec(255,255,0))
                    hint("Marked \"" + mdlname(ManualBogie) + "\" #"+ManualBogie:id()+" for manual linking.",3)
                    owner():soundPlay(0,2,"buttons/button3.wav")
                    
                    
                }
                
            }
            
        }
        
        if(Key == CancelManualLink & !owner():inVehicle() & ManualBogie:isValidPhysics()){
                
            hint("Cancelled manual linking.",3)
            owner():soundPlay(0,2,"buttons/button19.wav")
            ManualBogie = noentity()
            
        }
            
    }
    
}else{
    
    TickData = clkName():explode("|")

    if(TickData[1,string] == "holodelete"){
        
        holoDelete(TickData[2,string]:toNumber())
        
    }elseif(TickData[1,string] == "updateDist"){
        
        local PairsKeys = Pairs:keys()
        
        FeetToClosestCoupling = inf()
        SecondsToCouple = 0
        
        for(X = 1,PairsKeys:count()){
            
            local NDist = Pairs[PairsKeys[X,string],array][5,number]/12 #convert from inches to feet
            
            if(FeetToClosestCoupling > NDist & Pairs[PairsKeys[X,string],array][1,number] <= 3){
                
                local Frames = PairsKeys[X,string]:explode("|")
                local FirstFrame = entity(Frames[1,string]:toNumber())
                local SecondFrame = entity(Frames[2,string]:toNumber())
                
                FeetToClosestCoupling = NDist
                local CouplingFtPerSecond = (FirstFrame:vel() - SecondFrame:vel()):length()
                CouplingMPH = round((CouplingFtPerSecond*60*60)/(5280*12),1)
                SecondsToCouple = FeetToClosestCoupling/CouplingMPH
                
                
            }
            
        }
        
        timer("updateDist",500)
        
    }
    
    if(Pairs[clkName(),array]:count()){
        
        local Flag = 0
        
        local UID = clkName()
        
        local FirstCouplingID = TickData[1,string]
        local SecondCouplingID = TickData[2,string]
        
        local FirstFrame = entity(FirstCouplingID:toNumber())
        local SecondFrame = entity(SecondCouplingID:toNumber())
        
        local FirstCarData = CouplingTracker[FirstCouplingID,table]
        local SecondCarData = CouplingTracker[SecondCouplingID,table]
        
        if(Pairs[UID,array][2,number] == 0){
            
            Pairs[UID,array][1,number] = 5
            Pairs[UID,array][5,number] = inf()
            
        }
        
        if(Pairs[UID,array][1,number] == 5){ #DEFCON 5 - Little activity, occasional checks to see if things are happening
            
            local ConditionA = ConditionB = 1
            
            if((FirstCarData["PBog",entity]:hasConstraints("rope") & FirstCarData["NBog",entity]:hasConstraints("rope")) | !FirstFrame:isValid()){
                            
                ConditionA = 0
                stopTracking(FirstCouplingID)
                            
            }
            
            if((SecondCarData["PBog",entity]:hasConstraints("rope") & SecondCarData["NBog",entity]:hasConstraints("rope")) | !SecondFrame:isValid()){
                    
                ConditionB = 0   
                stopTracking(SecondCouplingID)    
                            
            }
                        
            local ConditionC = abs(FirstFrame:pos():z() - SecondFrame:pos():z()) < 200
            local ConditionD = (FirstFrame:pos()-SecondFrame:pos()):length() < 3000
            
            if(ConditionA & ConditionB & ConditionC & ConditionD){
                
                Test1 = FirstFrame:toLocal(SecondFrame:pos()):rotateAroundAxis(vec(0,0,1),FirstCarData["XvsY",number]-90)
                Test2 = SecondFrame:toLocal(FirstFrame:pos()):rotateAroundAxis(vec(0,0,1),SecondCarData["XvsY",number]-90)
                
                local Valid1 = Valid2 = ""
                
                if(Test1:x() >= 0){ #expand this to work across different iterations of stuff
            
                    Pairs[UID,array][3,number] = 1  * FirstCarData["PLen",number]
                    Bog1 = FirstCarData["PBog",entity]
                    Valid1 = "PCoup"
                    
                }else{
                    
                    Pairs[UID,array][3,number] = -1 * FirstCarData["NLen",number]
                    Bog1 = FirstCarData["NBog",entity]
                    Valid1 = "NCoup"
                    
                }
                
                if(Test2:x() >= 0){
                    
                    Pairs[UID,array][4,number] = 1  * SecondCarData["PLen",number]
                    Bog2 = SecondCarData["PBog",entity]
                    Valid2 = "PCoup"
                    
                }else{
                    
                    Pairs[UID,array][4,number] = -1 * SecondCarData["NLen",number]
                    Bog2 = SecondCarData["NBog",entity]
                    Valid2 = "NCoup"
                    
                }
                
                #either end has already been coupled once before, or either end is already coupled
                
                if(FirstCarData[Valid1,number] & SecondCarData[Valid2,number] & !Bog1:hasConstraints("rope") & !Bog2:hasConstraints("rope")){
                    
                    Pairs[UID,array][1,number] = 4
                    Pairs[UID,array][2,number] = 10
                    
                }
                
            }
            
        }
        
        if(Pairs[UID,array][1,number] == 4){ #DEFCON 4: Car is in the right general vicinity, check if it's facing the right direction
            
            local Test1B = FirstFrame:toLocal(SecondFrame:toWorld(SecondCarData["Dir",vector] * Pairs[UID,array][4,number])*vec(1,1,0)):rotateAroundAxis(vec(0,0,1),FirstCarData["XvsY",number]-90)
            
            local Width = FirstCarData["EndCirRad",number]/80
    
            local Ratio = ((Test1B:x() * sign(Pairs[UID,array][3,number])) -abs(Pairs[UID,array][3,number])) / abs(Test1B:y())
            
            if((Ratio > Width) & (Ratio > 0)){
                
                local Test2B = SecondFrame:toLocal(FirstFrame:toWorld(FirstCarData["Dir",vector] * Pairs[UID,array][3,number])*vec(1,1,0)):rotateAroundAxis(vec(0,0,1),SecondCarData["XvsY",number]-90)
                
                local Width2 = SecondCarData["EndCirRad",number]/80
                
                local Ratio2 = ((Test2B:x() * sign(Pairs[UID,array][4,number])) -abs(Pairs[UID,array][4,number])) / abs(Test2B:y())
                
                if((Ratio2 > Width2) & (Ratio2 > 0)){
                    
                    Pairs[UID,array][1,number] = 3
                    Pairs[UID,array][2,number] = 10
                    
                }
                
            }
            
        }
        
        if(Pairs[UID,array][1,number] == 3){ #DEFCON 3: Car is aligned, just isn't in range yet. Tracked frequently.
    
            local V1 = FirstFrame:toWorld(FirstCarData["Dir",vector] * Pairs[UID,array][3,number])*vec(1,1,0)
            local V2 = SecondFrame:toWorld(SecondCarData["Dir",vector] * Pairs[UID,array][4,number])*vec(1,1,0)
            
            local Dist = V1:distance(V2)
            local Dist2 = Dist - (FirstCarData["EndCirRad",number] + SecondCarData["EndCirRad",number] - 4)
            Pairs[UID,array][5,number] = Dist2
            
            if((Dist2 - 250) < 0){
                
                Pairs[UID,array][1,number] = 2
                Pairs[UID,array][2,number] = 10
                
            }
            
        }
        
        if(Pairs[UID,array][1,number] == 2){ #DEFCON 2: Car is very close to coupling. Update extremely frequently.
            
            local V1 = FirstFrame:toWorld(FirstCarData["Dir",vector] * Pairs[UID,array][3,number])*vec(1,1,0)
            local V2 = SecondFrame:toWorld(SecondCarData["Dir",vector] * Pairs[UID,array][4,number])*vec(1,1,0)
            
            local Dist = V1:distance(V2)
            local Dist2 = Dist - (FirstCarData["EndCirRad",number] + SecondCarData["EndCirRad",number] - 4)
            Pairs[UID,array][5,number] = Dist2
            
            if(Dist2 < 0){
                
                Pairs[UID,array][1,number] = 1
                Pairs[UID,array][2,number] = 1
                
            }
            
        }
        
        if(Pairs[UID,array][1,number] == 1){ #DEFCON 1: Car is presumed in range to couple, double-check everything then couple the car.
                        
            local Test1B = FirstFrame:toLocal(SecondFrame:toWorld(SecondCarData["Dir",vector] * Pairs[UID,array][4,number])*vec(1,1,0)):rotateAroundAxis(vec(0,0,1),FirstCarData["XvsY",number]-90)
            
            local Width = FirstCarData["EndCirRad",number]/80

            local Ratio = ((Test1B:x() * sign(Pairs[UID,array][3,number])) -abs(Pairs[UID,array][3,number])) / abs(Test1B:y())
            
            if((Ratio > Width) & (Ratio > 0)){
                
                local Test2B = SecondFrame:toLocal(FirstFrame:toWorld(FirstCarData["Dir",vector] * Pairs[UID,array][3,number])*vec(1,1,0)):rotateAroundAxis(vec(0,0,1),SecondCarData["XvsY",number]-90)
                
                local Width2 = SecondCarData["EndCirRad",number]/80

                local Ratio2 = ((Test2B:x() * sign(Pairs[UID,array][4,number])) -abs(Pairs[UID,array][4,number])) / abs(Test2B:y())
                
                if((Ratio2 > Width2) & (Ratio2 > 0)){
                    
                    local Var1 = 1.5-sign(Pairs[UID,array][3,number])*0.5
                    local Var2 = 1.5-sign(Pairs[UID,array][4,number])*0.5
                    
                    CouplingTracker[FirstCouplingID,table][select(Var1,"PCoup","NCoup"),number] = 0
                    CouplingTracker[SecondCouplingID,table][select(Var2,"PCoup","NCoup"),number] = 0
                    
                    local RelativeVelocity = round(((FirstFrame:vel() - SecondFrame:vel()):length()*60*60)/(5280*12),1)
                    
                    couple(FirstCarData[select(Var1,"PBog","NBog"),entity],SecondCarData[select(Var2,"PBog","NBog"),entity],mdlname(FirstFrame)+" to "+mdlname(SecondFrame) + " at "+RelativeVelocity+" relative MPH.")
                    
                    if((!CouplingTracker[FirstCouplingID,table]["PCoup",number] & 
                    !CouplingTracker[FirstCouplingID,table]["NCoup",number]) | 
                    
                    (CouplingTracker[FirstCouplingID,table]["PBog",entity]:hasConstraints("rope") & 
                    CouplingTracker[FirstCouplingID,table]["NBog",entity]:hasConstraints("rope"))){
                        
                        stopTracking(FirstCouplingID)
                        
                    }
                    
                    if((!CouplingTracker[SecondCouplingID,table]["PCoup",number] & 
                    !CouplingTracker[SecondCouplingID,table]["NCoup",number]) | 
                    
                    (CouplingTracker[SecondCouplingID,table]["PBog",entity]:hasConstraints("rope") & 
                    CouplingTracker[SecondCouplingID,table]["NBog",entity]:hasConstraints("rope"))){
                        
                        stopTracking(SecondCouplingID)
                        
                    }
                    
                    Flag = 1
                    
                    Pairs:remove(UID)
                        
                }
                
            }
            
        }
        
        if(!Flag){newTimer(UID)}
        
    }
    
}

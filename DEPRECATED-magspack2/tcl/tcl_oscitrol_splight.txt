@name TCL Oscitrol Splight
@inputs On
@persist E:entity [RGB1 RGB2]:vector On1 On2 LightColour:vector T CycleLength BeamOff Painted
@model models/gsgtrainprops/parts/headlights/headlight_twinbeam_plate.mdl

#-------------------------------------------------------------------------------#
# W E L C O M E   A B O A R D   T H E   T R A N S - C A N A D A   L I M I T E D #
#                                                                               #
# This E2 is designed to simulate the Oscitrol oscillating headlight, which     #
# in turn simulates a Gyralite or MARS Light without any moving parts. They     #
# were used by a few railways, including the ATSF on some of their SD40-2       #
# fleet and the Alaska Railroad on the grand majority of their Geeps. Amtrak    #
# also used them extensively in the Northeast.                                  #
#                                                                               #
# This version is a complete revamp using the new Splight system. Simply place  #
# the E2 on your locomotive, wire On to a toggled button, test, parent and      #
# enjoy!                                                                        #
#                                                                               #
# Happy Railroading!                                                     TCL <3 #
#                                                                               #
#         Having problems? Find me on Discord!  TransCanadaLimited#8427         #
#-------------------------------------------------------------------------------#

if(first() | duped()){

LightColour = vec(255,255,200) #The color of the Lights. 255,255,200 is the default used by RLC headlights.
BeamOff = 0.01 #Minimum brightness during a flash cycle.
CycleLength = 1.25 #Time, in seconds, for one flash cycle.

Painted = 0 #Whether or not the light bezel is painted (1) or left as shiny aluminum (0).
PaintColour = vec(255) #Colour to use for painted light bezel.

#####

    T = 0
    function number supersine(Min, Max, Theta){
        local Sin = sin(Theta)
        return Min + (Sin+1)*(Max-Min)/2
    }
    
    E=entity()

    E:setSubMaterial(4,"models/proppertextures/invisible")

    E:setColor(PaintColour)

    if(Painted==0){
        E:setSubMaterial(0,"models/proppertextures/aluminum")
    }elseif(Painted==1){
        E:setSubMaterial(0,"models/proppertextures/acrylic")
    }
    
    holoCreate(0)
    holoParent(0,E)
    holoModel(0,"models/gsgtrainprops/parts/headlights/headlight_singlebeam_plate.mdl")
    holoPos(0,E:toWorld(vec(4.1,0,0)))
    holoEntity(0):setSubMaterial(0,"models/proppertextures/invisible")
    holoEntity(0):setSubMaterial(2,"models/proppertextures/invisible")
    holoEntity(0):setSubMaterial(3,"models/proppertextures/invisible")

    holoCreate(1)
    holoParent(1,E)
    holoModel(1,"models/gsgtrainprops/parts/headlights/headlight_singlebeam_plate.mdl")
    holoPos(1,E:toWorld(vec(-4.1,0,0)))
    holoEntity(1):setSubMaterial(0,"models/proppertextures/invisible")
    holoEntity(1):setSubMaterial(2,"models/proppertextures/invisible")
    holoEntity(1):setSubMaterial(3,"models/proppertextures/invisible")
    
    spriteEnable(2,1)
    spriteSpawn(2,"sprites/light_glow02")
    spriteSetParent(2,E)
    spriteSetPos(2,E:toWorld(vec(4.1,0,1)))
    spriteSetScale(2,1.5)
    
    spriteEnable(3,1)
    spriteSpawn(3,"sprites/light_glow02")
    spriteSetParent(3,E)
    spriteSetPos(3,E:toWorld(vec(-4.1,0,1)))
    spriteSetScale(3,1.5)
    
    spriteEnable(4,1)
    spriteSpawn(4,"models/proppertextures/lightglow_white")
    spriteSetParent(4,E)
    spriteSetPos(4,E:toWorld(vec(4.1,0,2)))
    spriteSetScale(4,0.02)
    
    spriteEnable(5,1)
    spriteSpawn(5,"models/proppertextures/lightglow_white")
    spriteSetParent(5,E)
    spriteSetPos(5,E:toWorld(vec(-4.1,0,2)))
    spriteSetScale(5,0.02)

}

if(On){
    timer("clk",50)
    local Sine1 = supersine(-1,2,T)
    local Sine2 = supersine(-1,2,T+180)
    RGB1 = clamp(LightColour*Sine1,LightColour*BeamOff,LightColour)
    RGB2 = clamp(LightColour*Sine2,LightColour*BeamOff,LightColour)
    On1 = clamp(1*Sine1,0,1)
    On2 = clamp(1*Sine2,0,1)
    T += 18/(CycleLength)
    if(T > 360){T -= 360}
    holoEntity(0):setSubMaterial(4,"models/debug/debugwhite")
    holoAlpha(0,200)
    holoDisableShading(0,1)
    holoEntity(1):setSubMaterial(4,"models/debug/debugwhite")
    holoAlpha(1,200)
    holoDisableShading(1,1)
}

else{
    RGB1 = RGB2 = vec()
    On1 = On2 = 0
    holoEntity(0):setSubMaterial(4,"models/proppertextures/glass_clear")
    holoAlpha(0,255)
    holoDisableShading(0,0)
    holoEntity(1):setSubMaterial(4,"models/proppertextures/glass_clear")
    holoAlpha(1,255)
    holoDisableShading(1,0)
}

holoColor(0,RGB1)
spriteSetColor(2,RGB1)
spriteSetAlpha(4,255*On1)

holoColor(1,RGB2)
spriteSetColor(3,RGB2)
spriteSetAlpha(5,255*On2)

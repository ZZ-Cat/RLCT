@name Anyone999991's PT2 EGP-Hud
@inputs EGP_HUD:wirelink Number:string RLCPT:wirelink MPH
@outputs 
@persist W H GaugeUpdateTime
@trigger 
if(first()|dupefinished()){

#config

W = 1920    #your screen width in pixels
H = 1080    #your screen height in pixels
            #these directly affect the position of the hud, so you dont HAVE to put in your actual screen size.
            

GaugeUpdateTime = 0.5   #the amount of time, in seconds, between gauge updates.
                        #!!!the lower the number, the more ops the e2 will use!!!
                        #reverser and throttle update every 100ms

#end of config



EGP_HUD:egpClear()

EGP_HUD:egpCircle(1,vec2(W-180,H-100),vec2(90,90))
EGP_HUD:egpColor(1,vec4(0,255,255,127))

EGP_HUD:egpCircle(2,vec2(W-370,H-100),vec2(90,90))
EGP_HUD:egpColor(2,vec4(0,255,255,127))

EGP_HUD:egpCircle(3,vec2(W-560,H-100),vec2(90,90))
EGP_HUD:egpColor(3,vec4(0,255,255,127))

EGP_HUD:egpCircle(4,vec2(W-180,H-100),vec2(80,80))
EGP_HUD:egpMaterial(4,"models/gsgtrainprops/cab/gauge_amp_emd")

EGP_HUD:egpCircle(5,vec2(W-370,H-100),vec2(80,80))
EGP_HUD:egpMaterial(5,"models/gsgtrainprops/cab/gauge_air_emd")

EGP_HUD:egpCircle(6,vec2(W-560,H-100),vec2(80,80))
EGP_HUD:egpMaterial(6,"models/gsgtrainprops/cab/gauge_air_emd")

EGP_HUD:egpBox(7,vec2(W-210,H-320),vec2(220,220))
EGP_HUD:egpColor(7,vec(30))

EGP_HUD:egpCircle(8,vec2(W-210,H-320),vec2(100,100))
EGP_HUD:egpMaterial(8,"models/gsgtrainprops/cab/speedo_black_freight")

EGP_HUD:egpBox(9,vec2(W-490,H-250),vec2(320,80))
EGP_HUD:egpColor(9,vec(30))

EGP_HUD:egpRoundedBox(10,vec2(W-490,H-235),vec2(280,20))
EGP_HUD:egpColor(10,vec(0))

EGP_HUD:egpCircle(11,vec2(W-490,H-235),vec2(23,23))
EGP_HUD:egpColor(11,vec(100))

EGP_HUD:egpText(12,"RVS",vec2(W-640,H-290))
EGP_HUD:egpSize(12,30)

EGP_HUD:egpText(13,"FWD",vec2(W-400,H-290))
EGP_HUD:egpSize(13,30)

EGP_HUD:egpText(14,"N",vec2(W-500,H-290))
EGP_HUD:egpSize(14,30)

EGP_HUD:egpBox(15,vec2(W-490,H-340),vec2(320,80))
EGP_HUD:egpColor(15,vec(30))

EGP_HUD:egpRoundedBox(16,vec2(W-490,H-325),vec2(280,20))
EGP_HUD:egpColor(16,vec(0))

EGP_HUD:egpText(17,"IDLE",vec2(W-640,H-380))
EGP_HUD:egpSize(17,30)

EGP_HUD:egpCircle(18,vec2(W-620,H-325),vec2(23,23))
EGP_HUD:egpColor(18,vec(100))

EGP_HUD:egpTriangle(19,vec2(0,-80),vec2(-5,30),vec2(5,30))
EGP_HUD:egpColor(19,vec(255))

EGP_HUD:egpCircle(29,vec2(W-560,H-100),vec2(10,10))
EGP_HUD:egpColor(29,vec(30))
EGP_HUD:egpParent(19,29)

EGP_HUD:egpTriangle(20,vec2(0,-80),vec2(-5,30),vec2(5,30))
EGP_HUD:egpColor(20,vec(255,0,0))

EGP_HUD:egpCircle(21,vec2(W-560,H-100),vec2(10,10))
EGP_HUD:egpColor(21,vec(30))
EGP_HUD:egpParent(20,21)

EGP_HUD:egpTriangle(22,vec2(0,-80),vec2(-5,30),vec2(5,30))
EGP_HUD:egpColor(22,vec(255))

EGP_HUD:egpCircle(30,vec2(W-370,H-100),vec2(10,10))
EGP_HUD:egpColor(30,vec(30))
EGP_HUD:egpParent(22,30)

EGP_HUD:egpTriangle(23,vec2(0,-80),vec2(-5,30),vec2(5,30))
EGP_HUD:egpColor(23,vec(255,0,0))

EGP_HUD:egpCircle(24,vec2(W-370,H-100),vec2(10,10))
EGP_HUD:egpColor(24,vec(30))
EGP_HUD:egpParent(23,24)

EGP_HUD:egpTriangle(25,vec2(0,-80),vec2(-5,30),vec2(5,30))
EGP_HUD:egpColor(25,vec(255))

EGP_HUD:egpCircle(26,vec2(W-180,H-100),vec2(10,10))
EGP_HUD:egpColor(26,vec(30))
EGP_HUD:egpParent(25,26)

EGP_HUD:egpTriangle(27,vec2(0,-80),vec2(-5,40),vec2(5,40))
EGP_HUD:egpColor(27,vec(255,0,0))

EGP_HUD:egpCircle(28,vec2(W-210,H-320),vec2(10,10))
EGP_HUD:egpColor(28,vec(30))
EGP_HUD:egpParent(27,28)

EGP_HUD:egpText(35,"Locomotive #"+Number,vec2(W-650,H-420))
EGP_HUD:egpSize(35,35)

timer("gaugeclk",1000)
}
#Reverser = 11, Throttle = 18, ThrottleNum = 17, MainRes = 21, EqualRes = 29, BrakeCyl = 24, BrakePipe = 30, Load = 25, MPH = 27

interval(100)

Reverser=RLCPT["Reverser",number]
Notch=RLCPT["Notch",number]
Dynamics=RLCPT["Dynamics",number]
DynaNotch=RLCPT["DynaNotch",number]
Load1=RLCPT["Load1",number]
MainRes=RLCPT["MainRes",number]
EqualRes=RLCPT["EqualRes",number]
BrakePipe=RLCPT["BrakePipe",number]
BrakeCyl=RLCPT["BrakeCyl",number]

#reverser

if(Reverser == -1){

EGP_HUD:egpPos(11,vec2(W-620,H-235))

}elseif(Reverser == 1){

EGP_HUD:egpPos(11,vec2(W-360,H-235))

}else{

EGP_HUD:egpPos(11,vec2(W-490,H-235))

}

#throttle and dynamics

if(!Dynamics){
    
    if(Notch>0){
    
    EGP_HUD:egpPos(18,vec2(W-620+(Notch*32.5),H-325))
    EGP_HUD:egpSetText(17,""+Notch)
    
    }else{
    
    EGP_HUD:egpPos(18,vec2(W-620,H-325))
    EGP_HUD:egpSetText(17,"IDLE")
    
    }
}elseif(Dynamics){
    
    if(DynaNotch>0){
    
    EGP_HUD:egpPos(18,vec2(W-620+(DynaNotch*32.5),H-325))
    EGP_HUD:egpSetText(17,"D"+DynaNotch)
    
    }else{
    
    EGP_HUD:egpPos(18,vec2(W-620,H-325))
    EGP_HUD:egpSetText(17,"SETUP")
    
    }
}  


if(clk("gaugeclk")){
    timer("gaugeclk",GaugeUpdateTime*1000)

#MPH
if(changed(MPH)){
EGP_HUD:egpAngle(28,-MPH*2.68+121)
}
#Load
if(changed(Load1)){
EGP_HUD:egpAngle(26,-Load1/10)
}
#MainRes
if(changed(MainRes)){
EGP_HUD:egpAngle(21,-MainRes*1.81+145)
}
#EqualRes
if(changed(EqualRes)){
EGP_HUD:egpAngle(29,-EqualRes*1.81+145)
}
#BrakeCyl
if(changed(BrakeCyl)){
EGP_HUD:egpAngle(24,-BrakeCyl*1.81+145)
}
#BrakePipe
if(changed(BrakePipe)){
EGP_HUD:egpAngle(30,-BrakePipe*1.81+145)
}

}




